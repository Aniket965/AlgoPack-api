{
  "mainALGO": "from collections import deque\n\nclass graph:\n  def __init__(self, num_vertices):\n    self.num_vertices = num_vertices\n    self.adj_list = [[] for _ in xrange(num_vertices)]\n\n  def add_edge(self, source, destination):\n    self.adj_list[source].append(destination)\n\n  def bfs(self, start):\n    visited = [False] * self.num_vertices\n\n    queue_vertex = deque([])\n    visited[start] = True\n    queue_vertex.append(start)\n\n    while len(queue_vertex) != 0:\n      current = queue_vertex.popleft()\n      print current,\n\n      for vertex in self.adj_list[current]:\n        if (not visited[vertex]):\n          visited[vertex] = True\n          queue_vertex.append(vertex)\n\n\n# Create a graph with 8 vertices\ngraph = graph(8)\n\n# Create arcs\ngraph.add_edge(0, 1)\ngraph.add_edge(0, 2)\ngraph.add_edge(1, 2)\ngraph.add_edge(1, 4)\ngraph.add_edge(2, 0)\ngraph.add_edge(2, 3)\ngraph.add_edge(3, 3)\ngraph.add_edge(3, 6)\ngraph.add_edge(4, 0)\ngraph.add_edge(4, 5)\ngraph.add_edge(5, 6)\ngraph.add_edge(5, 7)\ngraph.add_edge(6, 2)\ngraph.add_edge(7, 3)\n\nprint \"Breadth First Traversal is:\",\ngraph.bfs(0)\nprint \"\"\n\n# Expected Output\n# Breadth First Traversal is: 0 1 2 4 3 5 6 7\n"
}
