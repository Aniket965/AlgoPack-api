{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nstruct node\n{\n    node *alphabet[26];\n    bool isLeaf;\n} *root = NULL;\n\nnode *getNode()\n{\n    node *temp = new node();\n    temp -> isLeaf = false;\n\n    for(int i = 0; i < 26; i++)\n    {\n        temp -> alphabet[i] = NULL;\n    }\n\n    return temp;\n}\n\nvoid insert(string a)\n{\n    if(root == NULL)\n        root = getNode();\n\n    node *current = root;\n\n    for(unsigned int i = 0; i < a.length(); i++)\n    {\n        a[i] = tolower(a[i]);\n\n        if(current -> alphabet[int(a[i]) - 97] == NULL)\n        {\n            node *new_node = getNode();\n            current -> alphabet[int(a[i]) - 97] = new_node;\n            current = new_node;\n        }\n        else\n            current = current -> alphabet[int(a[i]) - 97];\n    }\n\n    current -> isLeaf = true;\n}\n\nvoid search(string a)\n{\n    if(root == NULL)\n        cout << \"There is no word in Trie\" << endl;\n\n    node *current = root;\n    unsigned int i;\n\n    for(i = 0; i < a.length(); i++)\n    {\n        a[i] = tolower(a[i]);\n\n        if(current -> alphabet[int(a[i] - 'a')] == NULL)\n        {\n            break;\n        }\n        else\n            current = current -> alphabet[int(a[i] - 'a')];\n    }\n\n    if(i == a.length() && current -> isLeaf == true)\n        cout << a << \" Found\" << endl;\n    else\n        cout << a << \" Not Present\" << endl;\n}\n\nbool isFreeNode(node *root)\n{\n    for(int i = 0; i < 26; i++)\n    {\n        if(root -> alphabet[i] != NULL)\n            return false;\n    }\n\n    return true;\n}\n\nbool removeWord(node *root, string a, unsigned int i)\n{\n    if(root)\n    {\n        if(i == a.length())\n        {\n            if(root -> isLeaf)\n            {\n                root -> isLeaf = false;\n\n                if(isFreeNode(root))\n                    return true;\n            }\n\n            return false;\n        }\n        else\n        {\n            a[i] = tolower(a[i]);\n\n            if(removeWord(root -> alphabet[int(a[i]) - 97], a, i + 1))\n            {\n                delete root -> alphabet[int(a[i]) - 97];\n                root -> alphabet[int(a[i]) - 97] = NULL;\n\n                return (!root -> isLeaf && isFreeNode(root));\n            }\n        }\n    }\n\n    return false;\n}\n\nvoid remove(string a)\n{\n    if(a.length() && root != NULL)\n        removeWord(root, a, 0);\n}\n\nint main()\n{\n    string a = \"aman\", b = \"akshit\", c = \"adish\", d = \"akshay\", e = \"akash\";\n\n    insert(a);\n    insert(b);\n    insert(c);\n    insert(d);\n    insert(e);\n\n    search(a);\n    search(b);\n    search(e);\n    search(\"swati\");\n\n    remove(a);\n\n    search(a);\n\n    return 0;\n}\n\n/* Output\n\naman Found\nakshit Found\nakash Found\nswati Not Present\naman Not Present\n\n*/\n"
}
