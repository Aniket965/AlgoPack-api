{
  "mainALGO": "# Ford Fulkerson MAx Flow Python Implementation\n# Referred from: Wikipiedia\n\nclass Edge(object):\n    def __init__(self, u, v, w):\n        self.source = u\n        self.sink = v\n        self.capacity = w\n    def __repr__(self):\n        return \"%s->%s:%s\" % (self.source, self.sink, self.capacity)\n\nclass FlowNetwork(object):\n    def __init__(self):\n        self.adj = {}\n        self.flow = {}\n\n    def add_vertex(self, vertex):\n        self.adj[vertex] = []\n\n    def get_edges(self, v):\n        return self.adj[v]\n\n    def add_edge(self, u, v, w=0):\n        if u == v:\n            raise ValueError(\"u == v\")\n        edge = Edge(u,v,w)\n        redge = Edge(v,u,0)\n        edge.redge = redge\n        redge.redge = edge\n        self.adj[u].append(edge)\n        self.adj[v].append(redge)\n        self.flow[edge] = 0\n        self.flow[redge] = 0\n\n    def find_path(self, source, sink, path):\n        if source == sink:\n            return path\n        for edge in self.get_edges(source):\n            residual = edge.capacity - self.flow[edge]\n            if residual > 0 and edge not in path:\n                result = self.find_path( edge.sink, sink, path + [edge])\n                if result != None:\n                    return result\n\n    def max_flow(self, source, sink):\n        path = self.find_path(source, sink, [])\n        while path != None:\n            residuals = [edge.capacity - self.flow[edge] for edge in path]\n            flow = min(residuals)\n            for edge in path:\n                self.flow[edge] += flow\n                self.flow[edge.redge] -= flow\n            path = self.find_path(source, sink, [])\n        return sum(self.flow[edge] for edge in self.get_edges(source))\n\nif __name__ != \"\":\n    g = FlowNetwork()\n    [g.add_vertex(v) for v in \"sopqrt\"]\n    g.add_edge('s','o',3)\n    g.add_edge('s','p',3)\n    g.add_edge('o','p',2)\n    g.add_edge('o','q',3)\n    g.add_edge('p','r',2)\n    g.add_edge('r','t',3)\n    g.add_edge('q','r',4)\n    g.add_edge('q','t',2)\n    print \"The maximum possible flow is: \" + str(g.max_flow('s','t'))\n\n# Output For Given Graph: The maximum possible flow is: 5\n#\n#               +------+                           +------+\n#      3/3      |      |           3/3             |      |     2/2\n#    +---------->  o   +--------------------------->  q   +--------+\n#    |          |      |                           |      |        |\n#    |          +------+                           +------+        |\n# +-----+           |                                  |        +--v--+\n# |     |           |                                  |        |     |\n# |  s  |           |0/2                             1/4        |  t  |\n# |     |           |                                  |        |     |\n# +-----+           |                                  |        +-----+\n#    |              |                                  |           ^\n#    |          +---v--+                           +---v--+        |\n#    |          |      |                           |      |        |\n#    +---------->   p  +--------------------------->   r  +--------+\n#       2/3     |      |           2/2             |      |      3/3\n#               +------+                           +------+\n"
}
