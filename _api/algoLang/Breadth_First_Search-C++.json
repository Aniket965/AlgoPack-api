{
  "mainALGO": "#include <iostream>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\nclass Graph\n{\n    int numberVertex;\n    vector <int> *adjacency;\n\n  public:\n    // Constructor to initialise graph\n    Graph(int numberVertex)\n    {\n        this->numberVertex = numberVertex;\n        adjacency = new vector <int> [numberVertex];\n    }\n\n    // Function to add edge between source and destination\n    void addEdge(int source, int destination)\n    {\n        adjacency[source].push_back(destination);\n    }\n\n    // Function to perform Breadth First Search\n    void bfs(int starting);\n};\n\nvoid Graph::bfs(int starting)\n{\n    bool visited[numberVertex];\n\n    for (int i = 0; i < numberVertex; i++)\n        visited[i] = false;\n\n    queue <int> queue_vertex;\n\n    visited[starting] = true;\n    queue_vertex.push(starting);\n\n    while (!queue_vertex.empty())\n    {\n        starting = queue_vertex.front();\n        cout << starting << \" \";\n        queue_vertex.pop();\n\n        for (vector <int> :: iterator it = adjacency[starting].begin(); it != adjacency[starting].end(); ++it)\n        {\n            if(!visited[*it])\n            {\n                visited[*it] = true;\n                queue_vertex.push(*it);\n            }\n        }\n    }\n}\n\nint main()\n{\n    // Number of vertices is 8\n    Graph graph(8);\n\n    // Create edges between vertices\n    graph.addEdge(0, 1);\n    graph.addEdge(0, 2);\n    graph.addEdge(1, 2);\n    graph.addEdge(1, 4);\n    graph.addEdge(2, 0);\n    graph.addEdge(2, 3);\n    graph.addEdge(3, 3);\n    graph.addEdge(3, 6);\n    graph.addEdge(4, 0);\n    graph.addEdge(4, 5);\n    graph.addEdge(5, 6);\n    graph.addEdge(5, 7);\n    graph.addEdge(6, 2);\n    graph.addEdge(7, 3);\n\n    cout << \"Breadth First Traversal is : \";\n    graph.bfs(0);\n\n    return 0;\n}\n\n\n/* Output\n\nBreadth First Traversal is : 0 1 2 4 3 5 6 7\n\n*/\n"
}
