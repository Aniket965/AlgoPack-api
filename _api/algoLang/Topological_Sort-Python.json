{
  "mainALGO": "class Graph:\n    \"\"\"\n    * Creates a adjaceny list for a graph\n    * Implements a function for topological sorting\n    \"\"\"\n\n    def __init__(self, no_vertices):\n        \"\"\"\n        Initialises an empty adjaceny list (list of lists)\n        \"\"\"\n\n        self.vertices = no_vertices\n        self.adjlist = [[] for i in xrange(0, no_vertices)]\n\n    def add_edge(self, vert1, vert2):\n        \"\"\"\n        Creates an edge between two vertices\n        \"\"\"\n\n        self.adjlist[vert1].append(vert2)\n\n    def topological_sort_util(self, i, stack, visited):\n        \"\"\"\n        Utility function for topological sort\n        \"\"\"\n\n        visited[i] = True\n        for node in self.adjlist[i]:\n            if not visited[node]:\n                self.topological_sort_util(node, stack, visited)\n\n        stack.append(i)\n\n    def topological_sort(self):\n        \"\"\"\n        Implements topological sort (DFS based approach)\n        \"\"\"\n\n        stack = []\n        visited = [False for i in xrange(0, self.vertices)]\n\n        for i in xrange(0, self.vertices):\n            if not visited[i]:\n                self.topological_sort_util(i, stack, visited)\n\n        print \"Topological Sort : \",\n        while len(stack) > 0:\n            print stack.pop(),\n\ndef main():\n    graph = Graph(6)\n    graph.add_edge(5, 2);\n    graph.add_edge(5, 0);\n    graph.add_edge(4, 0);\n    graph.add_edge(4, 1);\n    graph.add_edge(2, 3);\n    graph.add_edge(3, 1);\n\n    graph.topological_sort()\n\nif __name__ == \"__main__\":\n    main()\n\n#OUTPUT\n#Topological Sort :  5 4 2 3 1 0\n"
}
