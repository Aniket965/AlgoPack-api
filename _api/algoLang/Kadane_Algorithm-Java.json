{
  "mainALGO": "\npublic class kadane_Algorithm\n{\n\tpublic static int kadane(int input[], int n) // Function implementing Kadane's Algorithm (array contains at least one positive number)\n\t{\n\t\tint current_max = 0;\n\t\tint max_so_far = 0;\n\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tcurrent_max = Math.max(0, current_max + input[i]);\n\t\t\tmax_so_far = Math.max(max_so_far, current_max);\n\t\t}\n\n\t\treturn max_so_far; // Maximum subarray sum\n\t}\n\n\n\tpublic static void main(String[] args)\n\t{\n\t\tint n, max_subarray_sum;\n\t\tint input[] = { -2, 1, -6, 4, -1, 2, 1, -5, 4 }; // Input array\n\t\tn = input.length; // Size of array\n\n\t\tint flag = 0; // Flag variable to check if all the numbers in array are negative or not\n\t\tint largest_in_negative = input[0]; // Smallest_negative variable will store the maximum subarray sum if all the numbers are negative in array\n\n\t\tfor(int i = 0; i < n; i++) // Scanning each element in array\n\t\t{\n\t\t\tif(input[i] >= 0) // If any element is positive, kadane's algo can be applied\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\telse if(input[i] > largest_in_negative) // If all the elements are negative, find the largest in them\n\t\t\t\tlargest_in_negative = input[i];\n\t\t}\n\n\t\tif(flag == 1) // Kadane's algo applicable\n\t\t     max_subarray_sum = kadane(input, n);\n\t\telse\n\t\t     max_subarray_sum = largest_in_negative; // Kadane 's algo not applicable,\n\t  // Hence the max_subarray_sum will be the largest number in array itself\n\t\tSystem.out.println(\"Maximum Subarray Sum is \" + max_subarray_sum);\n\t}\n\n}\n\n/*\noutput : Maximum Subarray Sum is 6\n*/\n"
}
