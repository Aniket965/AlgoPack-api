{
  "mainALGO": "/**\n * Created by jude on 21/10/16.\n */\npublic class Floyd_Warshall_Algorithm {\n    public static int Infinity = Integer.MAX_VALUE;\n    static int[][] graph =  {     {0,        8,        Infinity, 15},\n            {Infinity, 0,        7,        Infinity},\n            {Infinity, Infinity, 0,        7},\n            {Infinity, Infinity, Infinity, 0}\n    };\n\n    public static void main(String[] args)\n    {\n        FloydWarshall(graph);\n    }\n    public static void FloydWarshall(int[][] graph)\n    {\n\n\n\n        for(int k=0;k<4;k++)\n        {\n            for(int i=0;i<4;i++)\n            {\n                for(int j=0;j<4;j++)\n                {\n                    if(graph[i][k] != Infinity && graph[k][j] != Infinity && graph[i][k]+graph[k][j] < graph[i][j])\n                    {\n                        graph[i][j] = graph[i][k]+graph[k][j];\n                    }\n                }\n            }\n        }\n\n        printSolution(graph);\n    }\n\n    private static void printSolution(int[][] graph) {\n        System.out.println(\"Shortest distances between each pair of vertices\");\n        for(int i=0;i<4;i++)\n        {\n            for(int j=0;j<4;j++)\n            {\n                if(graph[i][j] == Infinity)\n                {\n                    System.out.println(\"INFINITY \\t\");\n                }\n                else\n                {\n                    System.out.println(graph[i][j]);\n                }\n            }\n            System.out.println(\"\\n\");\n        }\n    }\n\n\n}\n\n/* OUTPUT\n\nThe matrix below shows the shortest distances between each pair of vertices\n           0           8          15          15\n    INFINITY           0           7          14\n    INFINITY    INFINITY           0           7\n    INFINITY    INFINITY    INFINITY           0\n\n*/\n"
}
