{
  "mainALGO": "import threading\nimport time\n\n_lk = threading.Lock()\n\nclass SleepSortThread(threading.Thread):\n    def __init__(self, val):\n        self.val = val\n        threading.Thread.__init__(self)\n\n    def run(self):\n        global _lk\n        # Thread is made to sleep in proportion to value\n        time.sleep(self.val * 0.1)\n        # Acquire lock\n        _lk.acquire()\n        print(self.val, end = \" \")\n        # Release lock\n        _lk.release()\n\ndef SleepSort(list):\n    ts = []\n\n    # Intialize a thread corresponding to each element in list\n    for i in list:\n        t = SleepSortThread(i)\n        ts.append(t)\n\n    # Start all Threads\n    for i in ts:\n        i.start()\n\n    # Wait for all threads to terminate\n    for i in ts:\n        i.join()\n\nx = [2, 4, 3, 1, 6, 8, 4]\nx = SleepSort(x)\n\n# Output\n# 1 2 3 4 4 6 8\n"
}
