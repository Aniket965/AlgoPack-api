{
  "mainALGO": "#include <iostream>\n\nconst int MAX = 100000; // Let's assume the array size is 100000\n\nint N; // N is the size of the whole array\nint bit[MAX];\n\nint lowbit(int x) {\n  return x & -x;\n}\n\nvoid update(int index, int value) {\n  // add \"value\" to the index-th element\n  for( ; index <= N ; index += lowbit(index)) {\n    bit[index] += value;\n  }\n}\n\nint query(int index) {\n  // query returns the prefix sum of the first element to the index-th element\n  int ret = 0;\n  for( ; index > 0 ; index -= lowbit(index)) {\n    ret += bit[index];\n  }\n  return ret;\n}\n\nint main(){\n\n  N = 10;\n\n  // WARNING: the index of the first element is 1\n  update(2, 100);\n  update(5, 1000);\n  update(8, 10);\n\n  std::cout << query(1) << std::endl;  // 0\n  std::cout << query(2) << std::endl;  // 100\n  std::cout << query(3) << std::endl;  // 100\n  std::cout << query(4) << std::endl;  // 100\n  std::cout << query(5) << std::endl;  // 1100\n  std::cout << query(6) << std::endl;  // 1100\n  std::cout << query(7) << std::endl;  // 1100\n  std::cout << query(8) << std::endl;  // 1110\n  std::cout << query(9) << std::endl;  // 1110\n  std::cout << query(10) << std::endl; // 1110\n\n  return 0;\n}\n"
}
