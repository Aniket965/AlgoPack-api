{
  "mainALGO": "import math\n\ndef RMQ(seglist, segStart, segEnd, start, end, index):\n    if start <= segStart and end >= segEnd:\n        return seglist[index]\n\n    if segEnd < start or segStart > end:\n        return math.inf\n\n    mid = segStart + (segEnd - segStart) // 2\n\n    left = RMQ(seglist, segStart, mid, start, end, 2*index + 1)\n    right = RMQ(seglist, mid + 1, segEnd, start, end, 2*index + 2)\n\n    if left <= right:\n        return left\n    else:\n        return right\n\ndef buildSegmentTree(list, start, end, seglist, index):\n    if start == end:\n        seglist[index] = list[start]\n        return seglist[index]\n\n    mid = start + (end - start) // 2\n    left = buildSegmentTree(list, start, mid, seglist, index*2 + 1)\n    right = buildSegmentTree(list, mid + 1, end, seglist, index*2 + 2)\n\n    if left <= right:\n        seglist[index] = left\n    else:\n        seglist[index] = right\n\n    return seglist[index]\n\nif __name__ == '__main__':\n    list = [1, 3, 2, 7, 9, 11, 8, 4, 20, 15]\n    size = len(list)\n\n    height = math.ceil( math.log2(size) )\n    segtree_size = int(2 * (math.pow(2, height) - 1))\n    seglist = [0] * segtree_size\n\n    buildSegmentTree(list, 0, size - 1, seglist, 0)\n\n    start = 1\n    end = 5\n\n    print(\"Minimum value in index range \" +  str(start) + \" to \" + str(end) + \" is\")\n    print(RMQ(seglist, 0, size - 1, start, end, 0))\n\n\n''' Output\n\nMinimum value in index range 1 to 5 is\n2\n\n'''\n"
}
