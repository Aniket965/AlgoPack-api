{
  "mainALGO": "/* C++ implementation of Kadane's Algorithm to find the Maximum Subarray Sum\r\nincluding the extra phase required when all the numbers in array are negative */\r\n\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint kadane(int input[], int n) // Function implementing Kadane's Algorithm (array contains at least one positive number)\r\n{\r\n    int current_max = 0, max_so_far = 0;\r\n\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        current_max = max(0, current_max + input[i]);\r\n        max_so_far = max(max_so_far, current_max);\r\n    }\r\n\r\n    return max_so_far; // Maximum subarray sum\r\n}\r\n\r\nint main()\r\n{\r\n    int max_subarray_sum;\r\n    int input[] = {-2, 1, -6, 4, -1, 2, 1, -5, 4}; // Input array\r\n    int n = sizeof(input) / sizeof(input[0]); // Size of array\r\n    int flag = 0; // Flag variable to check if all the numbers in array are negative or not\r\n    int largest_in_negative = input[0]; // Smallest_negative variable will store the maximum subarray sum if all the numbers are negative in array\r\n\r\n    for(int i = 0; i < n; i++) // Scanning each element in array\r\n    {\r\n        if(input[i] >= 0) // If any element is positive, kadane's algo can be applied\r\n        {\r\n            flag = 1;\r\n            break;\r\n        }\r\n        else if(input[i] > largest_in_negative) // If all the elements are negative, find the largest in them\r\n            largest_in_negative = input[i];\r\n    }\r\n\r\n    if(flag == 1) // Kadane's algo applicable\r\n        max_subarray_sum = kadane(input, n);\r\n    else\r\n        max_subarray_sum = largest_in_negative; // Kadane 's algo not applicable,\r\n        // hence the max_subarray_sum will be the largest number in array itself\r\n\r\n    cout << \"Maximum Subarray Sum is \" << max_subarray_sum << endl;\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n/* Output\r\n\r\nMaximum Subarray Sum is 6\r\n\r\n*/\r\n"
}
