{
  "mainALGO": " class stackDynamicArray {\n   \n     private int data[];\n     private int top;\n     public stackDynamicArray() \n     {\n         data = new int[2];\n         top = -1;\n     }\n     public int size() \n     {\n         return top + 1;\n     }\n     public int top() \n     {\n         if (top == -1) \n         {\n             System.out.println(\"UnderFlow\");\n             return Integer.MIN_VALUE;\n         }\n         return data[top];\n     }\n     public boolean isEmpty() \n     {\n         if (top == -1)\n             return true;\n         else\n             return false;\n     }\n     public void push(int element) \n     {\n         if (size() == data.length) \n         {\n             doubleCapacity();\n         }\n         top++;\n         data[top] = element;\n     }\n     public void doubleCapacity()\n     {\n         int temp[] = new int[2 * data.length];\n         for (int i = 0; i < size(); i++) \n         {\n             temp[i] = data[i];\n         }\n         data = temp;\n     }\n     public int pop() \n     {\n         if (top == -1) \n         {\n             System.out.println(\"UnderFlow\");\n             return Integer.MIN_VALUE;\n         }\n         int temp = data[top];\n         top--;\n         return temp;\n     }\n }\n\n public class DynamicStack {\n     public static void main(String[] args) {\n     \n         stackDynamicArray st = new stackDynamicArray();    \n       \t for (int i = 0; i < 10; i++) \n         {\n             st.push(i);\n         }\n         while (!st.isEmpty()) \n         {\n             System.out.println(st.pop());\n         }\n     }\n }\n\n/*OUTPUT:\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n 0\n*/\n \n"
}
