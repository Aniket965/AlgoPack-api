{
  "mainALGO": "class FloydWarshall:\n    \"\"\"\n    Implements : Floyd Warshall Algorithm\n    Inputs     : Adjaceny Matrix (list of lists)\n    Outputs    : Shortest distance between all pairs\n    \"\"\"\n\n    def __init__(self, adj_matrix):\n        \"\"\"\n        Initialises distance matrix (list of lists)\n        \"\"\"\n\n        self.adj_matrix = adj_matrix\n        self.distance = adj_matrix\n        self.num_vertices = len(adj_matrix)\n\n    def run(self):\n        \"\"\"\"\n        Implements Floyd Warshall Algorithm\n        \"\"\"\n\n        for k in xrange(0, self.num_vertices):\n            for i in xrange(0, self.num_vertices):\n                for j in xrange(0, self.num_vertices):\n                    if self.distance[i][k] + self.distance[k][j] < self.distance[i][j]:\n                        self.distance[i][j] = self.distance[i][k] + self.distance[k][j]\n\n    def get_distance(self):\n        \"\"\"\n        Returns the distance list\n        \"\"\"\n\n        return self.distance\n\n    def print_distance(self):\n        for node in self.distance:\n            for each in node:\n                print each,\n            print\n\ndef main():\n    graph = [[0, 5, float('inf'), 10],\n             [float('inf'), 0, 3, float('inf')],\n             [float('inf'), float('inf'), 0, 1],\n             [float('inf'), float('inf'), float('inf'), 0]]\n\n\n    floyd = FloydWarshall(graph)\n    floyd.run()\n    floyd.print_distance()\n\nif __name__ == '__main__':\n    main()\n\n#OUTPUT\n#0 5 8 9\n#inf 0 3 4\n#inf inf 0 1\n#inf inf inf 0\n"
}
