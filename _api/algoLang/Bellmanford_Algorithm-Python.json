{
  "mainALGO": "class BellmanFord:\n    \"\"\"\n    Input  : Directed Graph\n    Output : Minimum distance from provided source\n\n    Requirements\n    ==========================================================\n    * Adjency List in the form of a dictionary\n         * Note : Each node should have a corresponding key (even if empty)\n    * A source\n    \"\"\"\n\n    def __init__(self, adjList, source):\n        \"\"\"\n        * Converts the adjlist into tuples with source, destination and weight triplets\n        * Intialisses distance\n        \"\"\"\n\n        self.no_vertices = len(adjList.keys())\n        self.source = source\n        self.edge_list = []\n        self.dist = {}\n        for node in adjList.keys():\n            self.dist[node] = float('inf')           # Sets all distances to inf\n            for connected_node in adjList[node].keys():\n                self.edge_list.append((node, connected_node, adjList[node][connected_node]))\n        self.dist[source] = 0                        # Makes source distance as 0\n        self.no_of_edges = len(self.edge_list)\n\n    def run(self):\n        \"\"\"\n        Bellmanford Implementation\n        \"\"\"\n\n        for i in xrange(0, self.no_vertices - 1):\n            for j in xrange(0, self.no_of_edges):\n                start = self.edge_list[j][0]\n                end = self.edge_list[j][1]\n                weight = self.edge_list[j][2]\n                if self.dist[start] + weight < self.dist[end]:\n                    self.dist[end] = self.dist[start] + weight\n\n    def get_dist(self):\n        \"\"\"\n        Returns distance dictionary\n        \"\"\"\n\n        return self.dist\n\n    def print_dist(self):\n        print \"Node\", \"\\t\\tDistance\"\n        for each in self.dist.keys():\n            print each, \"\\t\\t\", self.dist[each]\n\n\ng = { 'A': {'B': -1, 'C': 4},\n      'B': {'C': 3, 'D': 2, 'E': 2},\n      'C': {}, \n      'D': {'B': 1, 'C': 5},\n      'E': {'D': -3}, \n    }\n\nbellmanford = BellmanFord(g, 'A')\nbellmanford.run()\nbellmanford.print_dist()\n\n#OUTPUT\n#Node \t\tDistance\n#A \t\t0\n#C \t\t2\n#B \t\t-1\n#E \t\t1\n#D \t\t-2\n"
}
