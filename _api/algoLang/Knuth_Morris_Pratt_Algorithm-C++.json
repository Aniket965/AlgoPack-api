{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nvoid calculateLps(string pattern, int lps[])\n{\n    int length = 0;  // Length of the previous longest prefix suffix\n    unsigned int i;\n\n    lps[0] = 0;\n    i = 1;\n\n    // The loop calculates lps[i] for i = 1 to size - 1\n    while(i < pattern.size())\n    {\n        if(pattern[i] == pattern[length])\n        {\n            length++;\n            lps[i] = length;\n            i++;\n        }\n        else // If (pattern[i] != pattern[len])\n        {\n            if(length != 0)\n                length = lps[length - 1];\n            else\n            {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n}\n\nvoid KMPSearch(string pattern, string text)\n{\n    int sizePattern = pattern.size();\n    int sizeText = text.size();\n\n    int *lps = new int[sizePattern];\n    int j  = 0;\n\n    calculateLps(pattern, lps);\n\n    int i = 0;\n\n    while(i < sizeText)\n    {\n        if (pattern[j] == text[i])\n        {\n            j++;\n            i++;\n        }\n\n        if(j == sizePattern)\n        {\n            cout << \"Pattern found at \" <<  i - j + 1 << endl;\n            j = lps[j - 1];\n        }\n        else if (i < sizeText && pattern[j] != text[i])\n        {\n            if (j != 0)\n                j = lps[j - 1];\n            else\n                i = i + 1;\n        }\n    }\n\n    delete[] lps;\n}\n\nint main()\n{\n    string text = \"namanchamanbomanamansanam\";\n    string pattern = \"aman\";\n    KMPSearch(pattern, text);\n    return 0;\n}\n\n/* Output\n\nPattern found at 2\nPattern found at 8\nPattern found at 17\n\n*/\n"
}
