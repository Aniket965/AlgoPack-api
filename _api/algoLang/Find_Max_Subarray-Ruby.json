{
  "mainALGO": "# Internal: Computes the sum of the left, right halves and their index where max is reached\n#\n# ARGS:\n# arr  - Array where the sub-array has to be found\n# low  - Index of the first element in arr\n# mid  - Index of the middle element in arr\n# high - Index of the last element in arr\n#\n# Return: Array (Triplet)\n#\n# Examples\n#   find_max_crossing_subarray([-2, -3, 4, -1, -2, 1, 5, -3], 0, 3, 7)\n#   => [2, 6, 7]\ndef find_max_crossing_subarray(arr, low, mid, high)\n  sum = max_left = 0\n  left_sum = -Float::INFINITY\n  max_left = 0\n  (low..mid).reverse_each do |i|\n    sum += arr[i]\n    if sum > left_sum\n      left_sum = sum\n      max_left = i\n    end\n  end\n\n  sum = max_right = 0\n  right_sum = -Float::INFINITY\n  (mid+1..high).each do |j|\n    sum += arr[j]\n    if sum > right_sum\n      right_sum = sum\n      max_right = j\n    end\n  end\n\n  [max_left, max_right, left_sum+right_sum]\nend\n\n# Internal: Computes the maximum sub array which returns maximum sum over a range\n#           Recursive strategy\n#\n# ARGS:\n# arr  - Array where the sub-array has to be found\n# low  - Index of the first element in arr\n# high - Index of the last element in arr\n#\n# Return: Array (Triplet)\n#\n# Examples\n#   find_max_subarray([-2, -3, 4, -1, -2, 1, 5, -3], 0, 7)\n#   find_max_subarray([-2, -3, 4, -1, -2, 1, 5, -3])\n#   => [2, 6, 7]\ndef find_max_subarray(arr, low=0, high=arr.length-1)\n  low ||= 0\n  high ||= arr.length-1\n\n  return [low, high, arr[low]] if low == high\n  mid = (low+high)/2\n  left_subarray = find_max_subarray(arr, low, mid)\n  right_subarray = find_max_subarray(arr, mid+1, high)\n  cross_subarray = find_max_crossing_subarray(arr, low, mid, high)\n\n  return left_subarray if left_subarray[2] > right_subarray[2] && left_subarray[2] > cross_subarray[2]\n  return right_subarray if right_subarray[2] > left_subarray[2] && right_subarray[2] > cross_subarray[2]\n  return cross_subarray\nend\n\ndef unit_test_find_max_subarray\n  arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n  ok = (find_max_subarray(arr) == [2, 6, 7])\n  if ok\n     p \"FIND MAX SUB ARRAY - OK\"\n  else\n     raise \"RESULT ARRAY AND EXPECTED ARRAY DO NOT MATCH\"\n  end\nend\n\nunit_test_find_max_subarray\n"
}
