{
  "mainALGO": "#include <stdio.h>\r\n#include <malloc.h>\r\n\r\ntypedef struct node\r\n{\r\n    int data;\r\n    struct node *next;\r\n}node;\r\n\r\nnode *head=NULL;\r\n\r\nint Is_List_Empty()\r\n{\r\n    if(head == NULL)\r\n        return 1;\r\n\r\n    return 0;\r\n}\r\n\r\nvoid Insert_At_Beginning(int value)\r\n{\r\n    node *temp =(node*)malloc(sizeof(node));\r\n    temp -> data = value;\r\n    temp -> next = head;\r\n    head = temp;\r\n}\r\n\r\nvoid Insert_At_End(int value)\r\n{\r\n    node *temp = (node*)malloc(sizeof(node)), *current = head;\r\n    temp -> data = value;\r\n    temp -> next = NULL;\r\n\r\n    if(Is_List_Empty())\r\n    {\r\n        head = temp;\r\n        return ;\r\n    }\r\n\r\n    while(current -> next != NULL)\r\n        current = current -> next;\r\n\r\n    current -> next = temp;\r\n}\r\n\r\nvoid Insert_After_Value(int desired, int value)\r\n{\r\n    node *current = head;\r\n\r\n    while(current != NULL && current -> data != desired)\r\n        current = current -> next;\r\n\r\n    if(current == NULL)\r\n    \tprintf(\"Element %d is not in list\\n\",desired);\r\n    else\r\n    {\r\n        node *temp = (node*)malloc(sizeof(node));\r\n        temp -> data = value;\r\n        temp -> next = current -> next;\r\n        current -> next = temp;\r\n    }\r\n}\r\n\r\nvoid Delete_At_Beginning()\r\n{\r\n    if(Is_List_Empty())\r\n        printf(\"List is empty\\n\");\r\n    else\r\n    {\r\n        node *temp = head;\r\n        head = head -> next;\r\n        temp -> next = NULL;\r\n        free(temp);\r\n    }\r\n}\r\n\r\nvoid Delete_At_End()\r\n{\r\n    if(Is_List_Empty())\r\n    {\r\n    \tprintf(\"List is empty\\n\");\r\n        return ;\r\n    }\r\n\r\n    node *temp = head, *prev;\r\n\r\n    if(head -> next == NULL)\r\n    {\r\n        head = NULL;\r\n        free(temp);\r\n        return ;\r\n    }\r\n\r\n    while(temp -> next != NULL)\r\n    {\r\n        prev = temp;\r\n        temp = temp -> next;\r\n    }\r\n\r\n    prev -> next = temp -> next;\r\n    temp -> next = NULL;\r\n    free(temp);\r\n}\r\n\r\nvoid Delete_With_Value(int desired)\r\n{\r\n    if(Is_List_Empty())\r\n    {\r\n    \tprintf(\"List is empty\\n\");\r\n        return ;\r\n    }\r\n\r\n    node *temp = head, *prev;\r\n\r\n    if(head -> data == desired)\r\n    {\r\n        head = head -> next;\r\n        temp -> next = NULL;\r\n    \tfree(temp);\r\n        return ;\r\n    }\r\n\r\n    while(temp != NULL && temp -> data != desired)\r\n    {\r\n        prev = temp;\r\n        temp = temp -> next;\r\n    }\r\n\r\n    if(temp == NULL)\r\n    \tprintf(\"Element %d not in list\\n\",desired);\r\n    else\r\n    {\r\n        prev -> next = temp -> next;\r\n        temp -> next = NULL;\r\n        free(temp);\r\n    }\r\n}\r\n\r\nvoid Search(int desired)\r\n{\r\n    node *temp = head;\r\n\r\n    while(temp != NULL && temp -> data != desired)\r\n        temp = temp -> next;\r\n\r\n    if(temp == NULL)\r\n    \tprintf(\"Element %d not in list\\n\",desired);\r\n    else\r\n        printf(\"Element %d present in list\\n\",desired);\r\n}\r\n\r\nvoid Print_Linked_List()\r\n{\r\n    if(Is_List_Empty())\r\n    {\r\n        printf(\"List is empty\\n\");\r\n        return ;\r\n    }\r\n\r\n    node *current = head;\r\n\r\n    while(current -> next != NULL)\r\n    {\r\n    \tprintf(\"%d -> \",current->data);\r\n        current = current -> next;\r\n    }\r\n\r\n    printf(\"%d\\n\",current->data);\r\n}\r\n\r\nvoid Length_Iterative()\r\n{\r\n    int length = 0;\r\n\r\n    if(!Is_List_Empty())\r\n    {\r\n        length++;\r\n        node *current = head;\r\n\r\n\twhile(current -> next != NULL)\r\n        {\r\n            length++;\r\n            current = current -> next;\r\n        }\r\n    }\r\n    printf(\"Length by iteration is : %d\\n\",length);\r\n}\r\n\r\nint Recursive_Count(node* current)\r\n{\r\n    if(current == NULL)\r\n        return 0;\r\n    else\r\n        return (1 + Recursive_Count(current -> next));\r\n}\r\n\r\nvoid Length_Recursive()\r\n{\r\n    int length = Recursive_Count(head);\r\n\r\n    printf(\"Length by iteration is : %d\\n\",length);\r\n}\r\n\r\nint main()\r\n{\r\n    int i;\r\n\r\n    for(i = 0; i < 5; i++)\r\n        Insert_At_Beginning(i);\r\n\r\n    Print_Linked_List();\r\n\r\n    for(i = 5; i < 10; i++)\r\n        Insert_At_End(i);\r\n\r\n    Print_Linked_List();\r\n\r\n    Insert_After_Value(5, 9);\r\n    Insert_After_Value(10, 9);\r\n\r\n    Print_Linked_List();\r\n\r\n    for(i = 0; i < 3; i++)\r\n        Delete_At_End();\r\n\r\n    Print_Linked_List();\r\n\r\n    for(i = 0; i < 3; i++)\r\n        Delete_At_Beginning();\r\n\r\n    Print_Linked_List();\r\n\r\n    Delete_With_Value(1);\r\n    Delete_With_Value(5);\r\n\r\n    Print_Linked_List();\r\n\r\n    Search(6);\r\n    Search(8);\r\n\r\n    Length_Iterative();\r\n    Length_Recursive();\r\n\r\n    return 0;\r\n}\r\n\r\n/*  Output\r\n    4 -> 3 -> 2 -> 1 -> 0\r\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 6 -> 7 -> 8 -> 9\r\n    Element 10 is not in list\r\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6 -> 7 -> 8 -> 9\r\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6\r\n    1 -> 0 -> 5 -> 9 -> 6\r\n    0 -> 9 -> 6\r\n    Element 6 is present in list\r\n    Element 8 not found\r\n    Length is 3 (Iterative)\r\n    Length is 3 (Recursive)\r\n*/\r\n"
}
