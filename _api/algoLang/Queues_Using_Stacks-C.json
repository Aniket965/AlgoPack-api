{
  "mainALGO": "/* Program to implement a queue using two stacks */\n// Courtesy: geeksforgeeks\n#include <stdio.h>\n#include <stdlib.h>\n\n/* structure of a stack node */\nstruct sNode\n{\n    int data;\n    struct sNode *next;\n};\n\n/* Function to push an item to stack*/\nvoid push(struct sNode** top_ref, int new_data);\n\n/* Function to pop an item from stack*/\nint pop(struct sNode** top_ref);\n\n/* structure of queue having two stacks */\nstruct queue\n{\n    struct sNode *stack1;\n    struct sNode *stack2;\n};\n\n/* Function to enqueue an item to queue */\nvoid enQueue(struct queue *q, int x)\n{\n    push(&q->stack1, x);\n}\n\n/* Function to dequeue an item from queue */\nint deQueue(struct queue *q)\n{\n    int x;\n    /* If both stacks are empty then error */\n    if(q->stack1 == NULL && q->stack2 == NULL)\n    {\n        printf(\"Q is empty\");\n        getchar();\n        exit(0);\n    }\n\n/* Move elements from satck1 to stack 2 only if\nstack2 is empty */\nif(q->stack2 == NULL)\n{\n    while(q->stack1 != NULL)\n    {\n        x = pop(&q->stack1);\n        push(&q->stack2, x);\n\n    }\n}\n\nx = pop(&q->stack2);\nreturn x;\n}\n\nint isEmpty(struct queue *q){\n    return (q->stack1 == NULL && q-> stack2 == NULL);\n}\n\n/* Function to push an item to stack*/\nvoid push(struct sNode** top_ref, int new_data)\n{\n    /* allocate node */\n    struct sNode* new_node =\n        (struct sNode*) malloc(sizeof(struct sNode));\n        if(new_node == NULL)\n        {\n            printf(\"Stack overflow \\n\");\n            getchar();\n            exit(0);\n\n        }\n\n/* put in the data */\nnew_node->data = new_data;\n\n/* link the old list off the new node */\nnew_node->next = (*top_ref);\n\n/* move the head to point to the new node */\n(*top_ref) = new_node;\n}\n\n/* Function to pop an item from stack*/\nint pop(struct sNode** top_ref)\n{\n    int res;\n    struct sNode *top;\n\n    /*If stack is empty then error */\n    if(*top_ref == NULL)\n    {\n        printf(\"Stack overflow \\n\");\n        getchar();\n        exit(0);\n\n    }\n    else\n    {\n        top = *top_ref;\n        res = top->data;\n        *top_ref = top->next;\n        free(top);\n        return res;\n\n    }\n}\n/* Driver function to test anove functions */\nint main()\n{\n    struct queue *q = (struct queue*)malloc(sizeof(struct queue));\n    q->stack1 = NULL;\n    q->stack2 = NULL;\n    enQueue(q, 80);\n    enQueue(q, 100);\n    enQueue(q, 10);\n    enQueue(q, 20);\n    enQueue(q, 30);\n    deQueue(q);\n    enQueue(q, 40);\n    enQueue(q, 50);\n    deQueue(q);\n    enQueue(q, 60);\n\n    /* Dequeue items */\n    while(!isEmpty(q))\n        printf(\"%d\\n\", deQueue(q));\n\n    return 0;\n}\n/* Output: [The first two elements would be dequeued]\n * 10\n * 20\n * 30\n * 40\n * 50\n * 60\n */\n"
}
