{
  "mainALGO": "#include <stdlib.h>\n#include <iostream>\n\nusing namespace std;\n\n// A linked list (LL) node to store a queue entry\nstruct QNode\n{\n    int key;\n    struct QNode *next;\n};\n\n// The queue, front stores the front node of LL and rear stores ths\n// last node of LL\nstruct Queue\n{\n    struct QNode *front, *rear;\n};\n\n// A utility function to create a new linked list node.\nstruct QNode* newNode(int k)\n{\n    struct QNode *temp = (struct QNode*)malloc(sizeof(struct QNode));\n    temp->key = k;\n    temp->next = NULL;\n    return temp;\n}\n\n// A utility function to create an empty queue\nstruct Queue *createQueue()\n{\n    struct Queue *q = (struct Queue*)malloc(sizeof(struct Queue));\n    q->front = q->rear = NULL;\n    return q;\n}\n\n// The function to add a key k to q\nvoid enQueue(struct Queue *q, int k)\n{\n    // Create a new LL node\n    struct QNode *temp = newNode(k);\n\n    // If queue is empty, then new node is front and rear both\n    if (q->rear == NULL)\n    {\n       q->front = q->rear = temp;\n       return;\n    }\n\n    // Add the new node at the end of queue and change rear\n    q->rear->next = temp;\n    q->rear = temp;\n}\n\n// Function to remove a key from given queue q\nstruct QNode *deQueue(struct Queue *q)\n{\n    // If queue is empty, return NULL.\n    if (q->front == NULL)\n       return NULL;\n\n    // Store previous front and move front one node ahead\n    struct QNode *temp = q->front;\n    q->front = q->front->next;\n\n    // If front becomes NULL, then change rear also as NULL\n    if (q->front == NULL)\n       q->rear = NULL;\n    return temp;\n}\n\n// Driver Program to test above functions\nint main()\n{\n    struct Queue *q = createQueue();\n    enQueue(q, 10);\n    enQueue(q, 20);\n    deQueue(q);\n    deQueue(q);\n    enQueue(q, 30);\n    enQueue(q, 40);\n    enQueue(q, 50);\n    struct QNode *n = deQueue(q);\n    if (n != NULL)\n      cout<<\"Dequeued item is \"<< n->key;\n    return 0;\n}\n\n\n/* OUTPUT\n  Dequeued item is 30\n*/\n"
}
