{
  "mainALGO": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct node\n{\n    int data;\n    struct node* left, *right;\n};\n\nvoid printGivenLevel(struct node* root, int level);\nint height(struct node* node);\nstruct node* newNode(int data);\n\n/* Function to print level order traversal a tree*/\nvoid printLevelOrder(struct node* root)\n{\n    int h = height(root);\n    int i;\n    for (i = 1; i <= h; i++)\n        printGivenLevel(root, i);\n}\n\n/* Print nodes at a given level */\nvoid printGivenLevel(struct node* root, int level)\n{\n    if (root == NULL)\n        return;\n    if (level == 1)\n        printf(\"%d \", root->data);\n    else if (level > 1)\n    {\n        printGivenLevel(root->left, level-1);\n        printGivenLevel(root->right, level-1);\n    }\n}\n\nint height(struct node* node)\n{\n    if (node == NULL)\n        return 0;\n    else\n    {\n        /* compute the height of each subtree */\n        int lheight = height(node->left);\n        int rheight = height(node->right);\n\n        /* use the larger one */\n        if (lheight > rheight)\n            return(lheight + 1);\n        else return(rheight + 1);\n    }\n}\n\n/* Helper function that allocates a new node with the\n   given data and NULL left and right pointers. */\nstruct node* newNode(int data)\n{\n    struct node* node = (struct node*)malloc(sizeof(struct node));\n    node->data = data;\n    node->left = NULL;\n    node->right = NULL;\n\n    return(node);\n}\n\n/* Driver program to test above functions*/\nint main()\n{\n    struct node *root = newNode(1);\n    root->left = newNode(2);\n    root->right = newNode(3);\n    root->left->left = newNode(4);\n    root->left->right = newNode(5);\n\n    printf(\"Level Order traversal of binary tree is \\n\");\n    printLevelOrder(root);\n\n    return 0;\n}\n"
}
