{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nstruct node\n{\n    int data;\n    node *next;\n} *head = NULL;\n\nbool Is_List_Empty()\n{\n    if(head == NULL)\n        return true;\n\n    return false;\n}\n\nvoid Insert_At_End(int value)\n{\n    node *temp = new node, *current = head;\n    temp -> data = value;\n    temp -> next = NULL;\n\n    if(Is_List_Empty())\n    {\n        head = temp;\n        return ;\n    }\n\n    while(current -> next != NULL)\n        current = current -> next;\n\n    current -> next = temp;\n}\n\nvoid Bubble_Sort(){\n  int cnt = 0;\n  node *start = head;\n  node *curr = NULL;\n  node *trail = NULL;\n  node *tmp = NULL;\n\n  //get cnt(size) of linked list\n  while(start != NULL){\n    start = start->next;\n    ++cnt;\n  }\n\n  for (int i = 0; i < cnt; ++i){\n    //set curr and trail at the start node\n    curr = trail = head;\n\n    while(curr->next != NULL){\n      //compares curr and its next\n      if (curr->data > curr->next->data){\n\n\t//swaps pointers for curr & curr->next\n\ttmp = curr->next;\n\tcurr->next = curr->next->next;\n\ttmp->next = curr;\n\n\t//setup pointers for the head and trail if applicable\n\tif(curr ==head)\n\t  head = trail = tmp;\n\telse\n\t  trail->next = tmp;\n\n\tcurr = tmp;\n      }\n      //advance pointers\n      trail = curr;\n      curr = curr->next;\n    }\n  }\n}\n\nvoid Print_Linked_List()\n{\n    if(Is_List_Empty())\n    {\n        cout << \"List is Empty\" << endl;\n        return ;\n    }\n\n    node *current = head;\n\n    while(current -> next != NULL)\n    {\n        cout << current -> data << \" -> \";\n        current = current -> next;\n    }\n\n    cout << current -> data << endl;\n}\n\nint main()\n{\n    int i;\n\n    cout << \"Before Bubble Sort \";\n    for(i = 10; i > 5; --i)\n      Insert_At_End(i);\n\n    Print_Linked_List();\n    Bubble_Sort();\n    cout << \"After Bubble Sort  \";\n    Print_Linked_List();\n\n    return 0;\n}\n\n/* Output\n   Before Bubble Sort 10 -> 9 -> 8 -> 7 -> 6\n   After Bubble Sort  6 -> 7 -> 8 -> 9 -> 10\n*/\n"
}
