{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\n// Function for binary search\nint Binary_Search(int array[], int size, int desired)\n{\n    int left = 0, right = size - 1, middle;\n\n    while (left <= right)\n    {\n        middle = left + (right - left) / 2;\n\n        if (array[middle] == desired)\n            return middle;\n        else if (desired < array[middle])\n            right = middle - 1;\n        else\n            left = middle + 1;\n    }\n\n    return -1;\n}\n\n\n// Function for lower bound:\n// finds the position of the lowest number greater than or equal to desired\nint Lower_Bound(int array[], int size, int desired)\n{\n    int left = -1, right = size, middle;\n    while (right - left > 1)\n    {\n        middle = left + (right - left) / 2;\n\n        if (array[middle] < desired)\n            left = middle;\n        else\n            right = middle;\n    }\n    return right;\n}\n\n\n// Function for upper bound:\n// finds the position of the lowest number strictly greater than desired\nint Upper_Bound(int array[], int size, int desired)\n{\n    int left = -1, right = size, middle;\n    while (right - left > 1)\n    {\n        middle = left + (right - left) / 2;\n\n        if (array[middle] <= desired)\n            left = middle;\n        else\n            right = middle;\n    }\n    return right;\n}\n\n\n// Driver Function\nint main()\n{\n    int array[] = {1, 2, 3, 4, 5, 5, 7};\n\n    // Element 4 to be searched\n    if (Binary_Search(array, 7, 4) != -1)\n        cout << \"Found\" << endl;\n    else\n        cout << \"Not Found\" << endl;\n\n    //Element 9 to be searched\n    if (Binary_Search(array, 7, 9) != -1)\n        cout << \"Found\" << endl;\n    else\n        cout << \"Not Found\" << endl;\n\n    // Element greater than or equal than 5\n    cout << Lower_Bound(array, 7, 5) << endl;\n\n    // Element greater than or equal than 6\n    cout << Lower_Bound(array, 7, 6) << endl;\n\n    // Element greater than 5\n    cout << Upper_Bound(array, 7, 5) << endl;\n\n    // Element greater than 0\n    cout << Upper_Bound(array, 7, 0) << endl;\n\n    return 0;\n}\n\n/* Output\n\nFound\nNot Found\n4\n6\n6\n0\n\n*/\n"
}
