{
  "mainALGO": "import java.util.NoSuchElementException;\n\npublic class HeapPriorityQueue {\n    private String[] heap;\n    private int size; // Number of elements in the heap\n\n    /**\n     * Initializes an empty priority queue with the given initial capacity\n     */\n    public HeapPriorityQueue(int initialCapacity) {\n        heap =  new String[initialCapacity + 1];\n        size = 0;\n    }\n\n    /**\n     * Initializes an empty priority queue\n     */\n    public HeapPriorityQueue() {\n        this(1);\n    }\n\n    /**\n     * Initializes a priority queue from the array of values\n     *\n     * @param vals the array of values\n     */\n    public HeapPriorityQueue(String [] vals) {\n        size = vals.length;\n        heap = new String[size + 1];\n        // we do not use the 0 index with the heap\n        System.arraycopy(vals, 0, heap, 1, size);\n\n        for(int x = size/2; x > 0; x--) {\n            percolateDown(x);\n        }\n    }\n\n    /**\n     * Returns true if the priority queue is empty\n     *\n     * @return true if this priority queue is empty; false otherwise\n     */\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    /**\n     * Returns the number of elements in the priority queue\n     *\n     * @return the number of elements in the priority queue\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * Returns the smallest element in the priority queue\n     *\n     * @return the smallest element in the priority queue\n     * @throws NoSuchElementException if the priority queue is empty\n     */\n    public String min() {\n        if(isEmpty()) {\n            throw new NoSuchElementException(\"Priority Queue is empty!\");\n        }\n        return heap[1];\n    }\n\n    /**\n     * Add a new element to the priority queue\n     *\n     * @param element the element to insert\n     */\n    public void insert(String element) {\n        if(size == heap.length -1) {\n            doubleSize();\n        }\n\n        int pos = ++size;\n        // percolate up\n        for(; pos > 1 && element.compareTo(heap[pos/2]) < 0; pos = pos/2) {\n            heap[pos] = heap[pos/2];\n        }\n        heap[pos] = element;\n    }\n\n    /**\n     * Removes and returns the smallest element in the priority queue\n     *\n     * @return the smallest element in the priority queue\n     * @throws NoSuchElementException if the priority queue is empty\n     */\n    public String removeMin() throws NoSuchElementException {\n        if(size == 0) {\n            throw new NoSuchElementException(\"Priority Queue is empty!\");\n        }\n\n        String min = heap[1];\n        heap[1] = heap[size--];\n        percolateDown(1);\n        return min;\n    }\n\n    private void doubleSize() {\n        String [] old = heap;\n        heap = (String[]) new String[heap.length * 2];\n        System.arraycopy(old, 1, heap, 1, size);\n    }\n\n    private void percolateDown(int k) {\n        String tmp = heap[k];\n        int left;\n        // Traverse down the left side of the tree\n        for(; 2*k <= size; k = left) {\n            left = 2*k;\n            int right = left + 1;\n            if(left != size && heap[left].compareTo(heap[right]) > 0) {\n                left = right;\n            }\n            if(tmp.compareTo(heap[left]) > 0) {\n                heap[k] = heap[left];\n            } else {\n                break;\n            }\n        }\n        heap[k] = tmp;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder out = new StringBuilder();\n        for(int x = 1; x <= size; ++x) {\n            out.append(heap[x]).append(\" \");\n        }\n        // remove trailing space\n        out.setLength(out.length() - 1);\n        return out.toString();\n    }\n\n    /*\n     * Output is provided with the inline comments\n     */\n    public static void main(String [] args) {\n        String [] keys = new String[]{\"p\", \"r\", \"i\", \"o\"};\n        HeapPriorityQueue h = new HeapPriorityQueue(keys);\n        System.out.println(h.toString()); // i o p r\n        h.insert(\"q\");\n        h.insert(\"z\");\n        h.insert(\"b\");\n        System.out.println(h.toString()); // b o i r q z p\n        h.removeMin();\n        System.out.println(h.toString()); // i o p r q z\n        h.removeMin();\n        System.out.println(h.toString()); // o q p r z\n        System.out.println(h.min()); // o\n        h.removeMin();\n        System.out.println(h.min()); p\n        h.removeMin();\n        h.removeMin();\n        assert(h.size() == 2);\n        h.removeMin();\n        h.removeMin();\n        System.out.println(h.isEmpty()); // true\n    }\n}\n"
}
