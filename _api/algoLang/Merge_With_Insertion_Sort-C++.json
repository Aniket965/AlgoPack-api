{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nint *temp;\n\nvoid insertion(int array[], int left, int right)\n{\n    for(int i = left; i <= right; i++)\n    {\n        int j = i;\n        int key = array[i];\n        while((j > left) && (array[j-1] > key))\n        {\n            array[j] = array[j-1];\n            j--;\n        }\n        array[j] = key;\n    }\n}\n\n// Conquer\nvoid conquer_merge(int array[], int left, int right, int mid)\n{\n    int k = left, i, j;\n\n    for(i = left, j = mid + 1; i <= mid && j <= right; k++)\n    {\n        if(array[i] <= array[j])\n        {\n            temp[k] = array[i];\n            i++;\n        }\n        else\n        {\n            temp[k] = array[j];\n            j++;\n        }\n    }\n\n    while(i <= mid)\n    {\n        temp[k] = array[i];\n        i++;\n        k++;\n    }\n\n    while(j <= right)\n    {\n        temp[k] = array[j];\n        j++;\n        k++;\n    }\n\n    for(i = left; i <= right; i++)\n        array[i] = temp[i];\n}\n\n\n// Divide array into halves\nvoid divide(int array[], int left, int right)\n{\n    // If the size of subarray to be sorted is less than or equal to 8.\n    // Perform Insertion Sort\n    if(right - left <= 8)\n        insertion(array, left, right);\n    // If size of array is greater than 8.\n    // Perform Merge_Sort\n    else\n    {\n        int mid = left + (right - left) / 2;\n\n        divide(array, left, mid);\n        divide(array, mid + 1, right);\n\n        conquer_merge(array, left, right, mid);\n    }\n}\n\nvoid Merge_Sort(int array[], int size)\n{\n    temp = new int[size];\n    divide(array, 0, size - 1);\n    delete [] temp;\n}\n\n// Function to print elements of array\nvoid Print_Array(int array[], int size)\n{\n    for(int i = 0; i < size; i++)\n        cout << array[i] << \" \";\n\n    cout << endl;\n}\n\nint main()\n{\n    int array[] = {2, 4, 3, 1, 6, 8, 4, 10, 11, 0, 15, 7, 9};\n    Merge_Sort(array, 13);\n    Print_Array(array, 13);\n    return 0;\n}\n\n// Output\n// 0 1 2 3 4 4 6 7 8 9 10 11 15\n"
}
