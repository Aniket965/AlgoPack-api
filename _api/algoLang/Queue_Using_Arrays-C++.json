{
  "mainALGO": "#include <iostream>\r\n#include <algorithm>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nclass Queue {\r\n public:\r\n  // Initialize queue of maximum size 'capacity'\r\n  explicit Queue(size_t capacity) : entries_(capacity) {}\r\n\r\n  // Enqueue function\r\n  void Enqueue(int x) {\r\n    if (tail_ == entries_.size()) {\r\n      // If number of elements in queue is equal to maximum capacity\r\n      if (num_queue_elements == entries_.size()) {\r\n        throw length_error(\"queue overflow\");\r\n        return;\r\n      } else {\r\n        // If number of elements in queue less than maximum queue size,\r\n        // rearrange\r\n        rotate(entries_.begin(), entries_.begin() + head_, entries_.end());\r\n        head_ = 0, tail_ = num_queue_elements;\r\n      }\r\n    }\r\n\r\n    entries_[tail_] = x;\r\n    ++tail_, ++num_queue_elements;\r\n  }\r\n\r\n  // Dequeue function\r\n  int Dequeue() {\r\n    // No elements in queue\r\n    if (!num_queue_elements) {\r\n      throw length_error(\"empty queue\");\r\n    }\r\n    --num_queue_elements;\r\n    int ret = entries_[head_];\r\n    ++head_;\r\n    return ret;\r\n  }\r\n\r\n  // Size function\r\n  size_t size() const { return num_queue_elements; }\r\n\r\n  // Check for emptiness\r\n  bool isEmpty() { return num_queue_elements == 0; }\r\n\r\n  // Display all elements in queue\r\n  void display() {\r\n    for (int i = head_; i < tail_; ++i) {\r\n      cout << entries_[i] << \" \";\r\n    }\r\n    cout << endl;\r\n  }\r\n\r\n private:\r\n  size_t head_ = 0, tail_ = 0, num_queue_elements = 0;\r\n  vector<int> entries_;\r\n};\r\n\r\nint main() {\r\n  // Initialize queue of size 5\r\n  Queue q(5);\r\n  // Enqueue 3 elements\r\n  q.Enqueue(1);\r\n  q.Enqueue(2);\r\n  q.Enqueue(3);\r\n  // Print size\r\n  cout << q.size() << \"\\n\";\r\n  // Print all elements\r\n  q.display();\r\n  // Check for emptiness, and Dequeue\r\n  if (!q.isEmpty()) q.Dequeue();\r\n  // Print size\r\n  cout << q.size() << \"\\n\";\r\n  // Print all elements\r\n  q.display();\r\n  // Enqueue 3 more elements\r\n  q.Enqueue(4);\r\n  q.Enqueue(5);\r\n  q.Enqueue(6);\r\n  // Print size\r\n  cout << q.size() << \"\\n\";\r\n  // Print all elements\r\n  q.display();\r\n  // Enqueue one more element -> Will throw error, since maximum size exceeeded\r\n  /*\r\n  q.Enqueue(7);\r\n  // Print size\r\n  cout << q.size() << \"\\n\";\r\n  // Print all elements\r\n  q.display();\r\n  */\r\n  return 0;\r\n}\r\n\r\n/***** OUTPUT *****\r\n3\r\n1 2 3\r\n2\r\n2 3\r\n5\r\n2 3 4 5 6\r\n******************/\r\n"
}
