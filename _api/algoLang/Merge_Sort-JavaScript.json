{
  "mainALGO": "\nfunction Merge(array,left,right,middle){\n    /*dividing in to array of n1,n2 length */\n    n1 = middle - left +1;\n    n2 = right - middle;\n   var  L = [];\n   var R = [];\n   /*loops for filling sub arrays*/\n    for(var i =0;i<n1;i++){\n        L[i] = array[left + i ];\n    }\n    for(var j=0;j<n2;j++){\n        R[j]=array[middle+j+1];\n    }\n    \n    i = 0;    \n    j = 0 ;   \n    var k = left;\n    /*loop for Merging values from 2 sub arrays to one*/\n\t        while (i < n1 && j < n2)\n\t        {\n\t            if (L[i] <= R[j])\n\t            {\n\t                array[k] = L[i];\n\t                i++;\n\t            }\n\t            else\n\t            {\n\t                array[k] = R[j];\n\t                j++;\n\t            }\n\t            k++;\n\t        }\n\t/*loops for adding remaing values*/ \n\t        while (i < n1)\n\t        {\n\t            array[k] = L[i];\n\t            i++;\n\t            k++;\n\t        }\n\t \n    \t   while (j < n2)\n\t        {\n\t            array[k] = R[j];\n\t            j++;\n\t            k++;\n\t        }\n\t    }\n function MergeSort(array,left,right){\n     if(left < right){\n         /*finding middle of sub array*/\n        var middle = Math.floor((left +right)/2);\n        /*division in 2 sub arrays*/ \n        MergeSort(array,left,middle);\n        MergeSort(array,middle+1,right);\n        Merge(array,left,right,middle);\n\n    }\n}\n/* test */\n\na=[1,3,6,54,56,78,78,6754,643,5,4];\nMergeSort(a,0,a.length-1);\nconsole.log(a);\n/*output 1,3,4,5,6,54,56,78,78,643,6754 */\n"
}
