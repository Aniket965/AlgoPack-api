{
  "mainALGO": "#include <iostream>\n#include <climits>\n#include <vector>\n#include <set>\n\nusing namespace std;\n\nconst int numberVertex = 10;\n\nvoid dijkstra(vector <pair<int, int> > Alist[numberVertex], int source)\n{\n    int distance[numberVertex], numVisitedVertex, node;\n    set <pair <int, int> > heap;\n\n    for(int i = 0; i < numberVertex; ++i)\n        distance[i] = INT_MAX;\n    \n    distance[source] = 0;\n\n    for(int i = 0; i < numberVertex; ++i)\n        heap.insert(make_pair(distance[i], i));\n\n    numVisitedVertex = 1;\n\n    while (numVisitedVertex < numberVertex)\n    {\n        int u = heap.begin()->second;\n        if (distance[u] == INT_MAX)\n            break;\n\n        int numNeighbours = Alist[u].size();\n        for(int vertex = 0; vertex < numNeighbours; vertex++)\n        {\n            node = Alist[u][vertex].first;\n            if (distance[node] > distance[u] + Alist[u][vertex].second)\n            {\n                heap.erase(make_pair(distance[node], node));\n                distance[node] = distance[u] + Alist[u][vertex].second;\n                heap.insert(make_pair(distance[node], node));\n            }\n        }\n        heap.erase(heap.begin());\n        ++ numVisitedVertex;\n\n    }\n\n    cout << \"Distance from Source:\" << endl;\n    cout << \"Vertex\\t\\tDistance\" << endl;\n    for(int i = 0; i < numberVertex; i++)\n        cout << i << \"\\t\\t\" << distance[i] << endl;\n}\n\nint main()\n{\n    int graph[numberVertex][numberVertex] = {{0, 14, 0, 7, 0, 0, 0, 8, 0, 10},\n                                             {14, 0, 8, 0, 0, 0, 0, 11, 0, 0},\n                                             {0, 8, 0, 7, 0, 4, 0, 0, 2, 0},\n                                             {7, 0, 7, 0, 9, 12, 0, 0, 0, 5},\n                                             {0, 0, 0, 9, 0, 0, 0, 0, 0, 0},\n                                             {0, 0, 4, 0, 0, 0, 2, 0, 0, 11},\n                                             {0, 0, 0, 12, 0, 2, 0, 1, 6, 15},\n                                             {8, 11, 0, 0, 0, 0, 1, 0, 7, 0},\n                                             {0, 0, 2, 0, 0, 0, 6, 7, 0, 0},\n                                             {10, 0, 0, 5, 0, 11, 15, 0, 0, 0}};\n\n    vector <pair<int, int> > Alist[numberVertex];\n    for (int i = 0; i < numberVertex; ++i)\n        for (int j = 0; j < numberVertex; ++j)\n            if (graph[i][j])\n                Alist[i].push_back(make_pair(j, graph[i][j]));\n\n    dijkstra(Alist, 0);\n\n    return 0;\n}\n\n\n/* Output\n\nDistance from Source:\nVertex\t\tDistance\n0\t\t0\n1\t\t14\n2\t\t14\n3\t\t7\n4\t\t16\n5\t\t11\n6\t\t9\n7\t\t8\n8\t\t15\n9\t\t10\n\n*/\n"
}
            4 \t\t       22  \t\t   1->2->5->4 \n                5 \t\t       12  \t\t   1->2->5 \n                6 \t\t       12  \t\t   1->7->6 \n                7 \t\t       11  \t\t   1->7 \n                8 \t\t       10  \t\t   1->2->8\n\t*/\n\n\treturn 0;\n}"
}
