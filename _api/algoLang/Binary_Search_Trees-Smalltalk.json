{
  "mainALGO": "using System;\n\nnamespace BinarySearchTree\n{\n        public class node\n        {\n            public int data;\n            public node left;\n            public node right;\n            public node(int d)\n            {\n                data = d;\n                left = null;\n                right = null;\n            }\n        }\n\n        class Program\n        {\n            node head;\n            public void Insert(int value)\n            {\n                node temp = new node(value);\n                if (head == null)\n                    head = temp;\n                else\n                {\n                    node current;\n                    current = head;\n                    while (current != null)\n                    {\n                        if (value < current.data)\n                        {\n                            if (current.left != null)\n                                current = current.left;\n                            else\n                            {\n                                current.left = temp;\n                                return;\n                            }\n                        }\n                        else\n                        {\n                            if (current.right != null)\n                                current = current.right;\n                            else\n                            {\n                                current.right = temp;\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n\n            public void Search(int value)\n            {\n                node current;\n                current = head;\n\n                while (current != null)\n                {\n                    if (value < current.data)\n                        current = current.left;\n                    else if (value > current.data)\n                        current = current.right;\n                    else\n                    {\n                        Console.WriteLine(\"Element \" + value + \" Found\");\n                        return;\n                    }\n                }\n\n                Console.WriteLine(\"Element \" + value + \" not Found\");\n            }\n\n            public int Min_Value(node head)\n            {\n                while (head.left != null)\n                    head = head.left;\n                return head.data;\n            }\n\n            public node Delete_Key(node head, int value)\n            {\n                if (head == null)\n                    return head;\n\n                if (value < head.data)\n                    head.left = Delete_Key(head.left, value);\n                else if (value > head.data)\n                    head.right = Delete_Key(head.right, value);\n                else\n                {\n                    if (head.left == null)\n                        return head.right;\n                    else if (head.right == null)\n                        return head.left;\n\n                    head.data = Min_Value(head.right);\n                    head.right = Delete_Key(head.right, head.data);\n                }\n                return head;\n            }\n\n            public void Delete(int value)\n            {\n                head = Delete_Key(head, value);\n            }\n\n            static void Main(string[] args)\n            {\n                Program x = new Program();\n\n                x.Insert(5);\n                x.Insert(7);\n                x.Insert(9);\n                x.Insert(8);\n                x.Insert(6);\n                x.Insert(4);\n\n                x.Search(9);\n                x.Search(2);\n\n                x.Delete(7);\n                x.Delete(5);\n                x.Delete(4);\n\n                x.Search(9);\n                x.Search(2);\n                x.Search(5);\n                x.Search(6);\n                Console.WriteLine();\n                Console.ReadLine();\n            }\n      }\n}\n\n/* Output\n\nElement 9 Found\nElement 2 not Found\nElement 9 Found\nElement 2 not Found\nElement 5 not Found\nElement 6 Found\n\n*/\n"
}
