{
  "mainALGO": "/**\n * Created by vampire-slayer on 29/10/16.\n * Java solution to the Knapsack problem using dynamic programming\n */\n\npublic class KnapsackProblem {\n\n\tpublic static int knapsack(int w, int[] weights, int[] values, int n) {\n\n\t\tint i, j;\n\t\tint[][] DP = new int[n + 1][w + 1];\n\n\t\tfor (i = 0; i <= n; i++) {\n\n\t\t\tfor (j = 0; j <= w; j++) {\n\n\t\t\t\tif (i == 0 || j == 0)\n\t\t\t\t\tDP[i][j] = 0;\n\t\t\t\telse if (weights[i - 1] <= j)\n\t\t\t\t\tDP[i][j] = Math.max(values[i - 1] + DP[i - 1][j - weights[i - 1]], DP[i - 1][j]);\n\t\t\t\telse\n\t\t\t\t\tDP[i][j] = DP[i - 1][j];\n\t\t\t}\n\t\t}\n\n\t\treturn DP[n][w];\n\t}\n\n\tpublic static void main (String[] args) {\n\n\t\tint[] values = {11, 22, 33, 44, 55};\n\t\tint[] weights = {111, 121, 131, 141, 151};\n\t\tint w = 300;\n\t\tint n = weights.length;\n\n\t\tSystem.out.println(knapsack(w, weights, values, n));\n\t}\n}\n\n/* Output\n\n99\n\n*/\n"
}
