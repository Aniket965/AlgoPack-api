{
  "mainALGO": "class node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Linked_List:\n    def __init__(self):\n        self.head = None\n\n    def Is_List_Empty(self):\n        if self.head == None:\n            return True\n\n        return False\n\n    def Insert_At_Beginning(self, value):\n        temp = node(value)\n        temp.next = self.head\n        self.head = temp\n\n    def Insert_At_End(self, value):\n        temp = node(value)\n        temp.next = None\n\n        if self.Is_List_Empty():\n            self.head = temp\n            return\n\n        current = self.head\n\n        while current.next != None:\n            current = current.next\n\n        current.next = temp\n\n    def Insert_After_Value(self, desired, value):\n        current = self.head\n\n        while current != None and current.data != desired:\n            current = current.next\n\n        if current == None:\n            print(\"Element \" + str(desired) + \" not in list\")\n        else:\n            temp = node(value)\n            temp.next = current.next\n            current.next = temp\n\n    def Delete_At_Beginning(self):\n        if self.Is_List_Empty():\n            print(\"List is empty\")\n        else:\n            temp = self.head\n            self.head = self.head.next\n            temp.next = None\n\n    def Delete_At_End(self):\n        if self.Is_List_Empty():\n            print(\"List is empty\")\n            return\n\n        temp = self.head\n\n        if self.head.next == None:\n            self.head = None\n            temp.next = None\n            return\n\n        while temp.next != None:\n            prev = temp\n            temp = temp.next\n\n        prev.next = temp.next\n        temp.next = None\n\n    def Delete_With_Value(self, desired):\n        if self.Is_List_Empty():\n            print(\"List is empty\")\n            return\n\n        temp = self.head\n\n        if self.head.data == desired:\n            self.head = self.head.next\n            temp.next = None\n            return\n\n        while temp != None and temp.data != desired:\n            prev = temp\n            temp = temp.next\n\n        if temp == None:\n            print(\"Element \" + str(desired) + \" is not in list\")\n        else:\n            prev.next = temp.next\n            temp.next = None\n\n\n    def Search(self, desired):\n        temp = self.head\n\n        while temp != None and temp.data != desired:\n            temp = temp.next\n\n        if temp == None:\n            print(\"Element \" + str(desired) + \" not found\")\n        else:\n            print(\"Element \" + str(desired) + \" is present in list\")\n\n    def Print_Linked_List(self):\n        if self.Is_List_Empty():\n            print(\"List is Empty\")\n            return\n\n        current = self.head\n\n        while current.next != None:\n            print(current.data, end = \" -> \")\n            current = current.next\n\n        print(current.data)\n\n    def Get_Length_Iterative(self):\n        current = self.head\n        length = 0\n\n        while current != None:\n            length += 1\n            current = current.next\n\n        return length\n\n    def Get_Length_Recursive(self):\n        def Count_Recursive(node):\n            if node is None:\n                return 0\n            else:\n                return 1 + Count_Recursive(node.next)\n\n        return Count_Recursive(self.head)\n\n\n\nLinkedList = Linked_List()\nprint(\"List Created!\")\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Iterative())\n\nfor i in range(0, 5):\n    LinkedList.Insert_At_Beginning(i)\n\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Iterative())\n\nfor i in range(5, 10):\n    LinkedList.Insert_At_End(i)\n\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Recursive())\n\nLinkedList.Insert_After_Value(5, 9)\nLinkedList.Insert_After_Value(10, 9)\n\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Iterative())\n\nfor i in range(0, 3):\n    LinkedList.Delete_At_End()\n\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Recursive())\n\nfor i in range(0, 3):\n    LinkedList.Delete_At_Beginning()\n\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Iterative())\n\nLinkedList.Delete_With_Value(1)\nLinkedList.Delete_With_Value(5)\n\nLinkedList.Print_Linked_List()\nprint(\"Current Length:\", LinkedList.Get_Length_Recursive())\n\nLinkedList.Search(6)\nLinkedList.Search(8)\n\n\n'''\nOutput\n\nList Created!\nList is Empty\nCurrent Length: 0\n4 -> 3 -> 2 -> 1 -> 0\nCurrent Length: 5\n4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 6 -> 7 -> 8 -> 9\nCurrent Length: 10\nElement 10 not in list\n4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6 -> 7 -> 8 -> 9\nCurrent Length: 11\n4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6\nCurrent Length: 8\n1 -> 0 -> 5 -> 9 -> 6\nCurrent Length: 5\n0 -> 9 -> 6\nCurrent Length: 3\nElement 6 is present in list\nElement 8 not found\n\n'''\n"
}
