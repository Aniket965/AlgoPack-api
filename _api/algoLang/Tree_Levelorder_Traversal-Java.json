{
  "mainALGO": "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Node\n{\n    int data;\n    Node left, right;\n    public Node(int item)\n    {\n        data = item;\n        left = right = null;\n    }\n}\n\nclass BinaryTree\n{\n    Node root;\n\n    public BinaryTree()\n    {\n        root = null;\n    }\n\n    void printLevelOrder()\n    {\n        int h = height(root);\n        int i;\n        for (i = 1; i <= h; i++)\n            printGivenLevel(root, i);\n    }\n\n    int height(Node root)\n    {\n        if (root == null)\n           return 0;\n        else\n        {\n            /* compute  height of each subtree */\n            int lheight = height(root.left);\n            int rheight = height(root.right);\n\n            /* use the larger one */\n            if (lheight > rheight)\n                return(lheight + 1);\n            else return(rheight + 1);\n        }\n    }\n\n    void printGivenLevel (Node root ,int level)\n    {\n        if (root == null)\n            return;\n        if (level == 1)\n            System.out.print(root.data + \" \");\n        else if (level > 1)\n        {\n            printGivenLevel(root.left, level-1);\n            printGivenLevel(root.right, level-1);\n        }\n    }\n\n    public static void main(String args[])\n    {\n       BinaryTree tree = new BinaryTree();\n       tree.root = new Node(1);\n       tree.root.left = new Node(2);\n       tree.root.right = new Node(3);\n       tree.root.left.left = new Node(4);\n       tree.root.left.right = new Node(5);\n       tree.root.right.left = new Node(6);\n       tree.root.right.right = new Node(7);\n       tree.root.left.left.left = new Node(8);\n       tree.root.left.left.right = new Node(9);\n\n       System.out.println(\"Level order traversal of binary tree is \");\n       tree.printLevelOrder();\n    }\n}\n\n/*\nOutput:\nLevel order traversal of binary tree is\n1 2 3 4 5 6 7 8 9\n*/\n"
}
