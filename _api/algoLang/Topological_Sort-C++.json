{
  "mainALGO": "#include <iostream>\n#include <stack>\n#include <vector>\n\nusing namespace std;\n\nclass Graph {\n\tint numVertex;\n\tvector<int> *adj;\n\n\tpublic:\n\t\t// Constructor to initialise graph\n\t\tGraph(int numVertex) {\n\t\t\tthis->numVertex = numVertex;\n\t\t\tadj = new vector<int> [numVertex];\n\t\t}\n\n\t\t// Function to add edge between source and destination\n\t\tvoid addEdge(int src, int dest) {\n\t\t\tadj[src].push_back(dest);\n\t\t}\n\t\tvoid topologicalSort();\n\t\tvoid topologicalSortUtil(int vertex, vector<bool> &visited, stack<int> &Stack);\n};\n\nvoid Graph::topologicalSortUtil(int vertex, vector<bool> &visited, stack<int> &Stack) {\n\tvisited[vertex] = true;\n\n\tfor(int i = 0; i < adj[vertex].size(); i++) {\n\t\tif(!visited[adj[vertex][i]]) {\n\t\t\ttopologicalSortUtil(adj[vertex][i], visited, Stack);\n\t\t}\n\t}\n\n\tStack.push(vertex);\n}\n\nvoid Graph::topologicalSort() {\n\tstack<int> Stack;\n\n\tvector<bool> visited(numVertex, false);\n\tfor(int i = 0; i < numVertex; i++) {\n\t\tif(!visited[i]) {\n\t\t\ttopologicalSortUtil(i, visited, Stack);\n\t\t}\n\t}\n\n\twhile(!Stack.empty()) {\n\t\tcout << Stack.top() << \" \";\n\t\tStack.pop();\n\t}\n}\n\nint main() {\n\tGraph graph(6);\n\tgraph.addEdge(5, 2);\n\tgraph.addEdge(5, 0);\n\tgraph.addEdge(4, 0);\n\tgraph.addEdge(4, 1);\n\tgraph.addEdge(2, 3);\n\tgraph.addEdge(3, 1);\n\n\tcout << \"Topological Sort: \";\n\tgraph.topologicalSort();\n\n\treturn 0;\n}\n\n/* Output\n  Topological Sort: 5 4 2 3 1 0\n*/\n"
}
