{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nstruct node {\n    int data;\n    node *next;\n    node(int value): data(value), next(NULL) {}\n} *head = NULL;\n\nbool Is_List_Empty() {\n    return (head == NULL);\n}\n\nvoid Insert_At_Beginning(int value) {\n    node *temp = new node(value);\n    temp -> next = head;\n    head = temp;\n}\n\nvoid Insert_At_End(int value) {\n    node *temp = new node(value);\n    if(Is_List_Empty()) {\n        head = temp;\n        return;\n    }\n    node  *current = head;\n    while(current -> next != NULL) {\n        current = current -> next;\n    }\n    current -> next = temp;\n}\n\nvoid Insert_After_Value(int desired, int value) {\n\n    node *current = head;\n    while(current != NULL && current -> data != desired)\n        current = current -> next;\n\n    if(current == NULL) {\n        cout << \"Element \" << desired << \" is not in list\" << endl;\n    } else {\n        node *temp = new node(value);\n        temp -> next = current -> next;\n        current -> next = temp;\n    }\n}\n\nvoid Delete_At_Beginning() {\n    if(Is_List_Empty())\n        cout << \"List is empty\" << endl;\n    else {\n        node *temp = head;\n        head = head -> next;\n        temp -> next = NULL;\n        delete temp;\n    }\n}\n\nvoid Delete_At_End() {\n    if(Is_List_Empty()) {\n        cout << \"List is empty\" << endl;\n        return;\n    }\n\n    if(head -> next == NULL) {\n        delete head;\n        head = NULL;\n        return;\n    }\n\n    node *temp = head;\n    while(temp -> next -> next != NULL) {\n        temp = temp -> next;\n    }\n    delete temp -> next;\n    temp -> next = NULL;\n}\n\nvoid Delete_With_Value(int desired) {\n    if(Is_List_Empty()) {\n        cout << \"List is empty\" << endl;\n        return;\n    }\n\n    node *temp = head, *prev = NULL;\n    if(head -> data == desired) {\n        head = head -> next;\n        temp -> next = NULL;\n        delete temp;\n        return;\n    }\n\n    while(temp != NULL && temp -> data != desired) {\n        prev = temp;\n        temp = temp -> next;\n    }\n    if(temp == NULL) {\n        cout << \"Element \" << desired << \" not in list\" << endl;\n    } else {\n        prev -> next = temp -> next;\n        temp -> next = NULL;\n        delete temp;\n    }\n}\n\nvoid Search(int desired) {\n    node *temp = head;\n    while(temp != NULL && temp -> data != desired) {\n        temp = temp -> next;\n    }\n    if(temp == NULL) {\n        cout << \"Element \" << desired << \" not found\" << endl;\n    } else {\n        cout << \"Element \" << desired << \" is present in list\" << endl;\n    }\n}\n\nvoid Print_Linked_List() {\n    if(Is_List_Empty()) {\n        cout << \"List is Empty\" << endl;\n        return;\n    }\n\n    node *current = head;\n    while(current != NULL) {\n        cout << current -> data;\n        current = current -> next;\n        if (current != NULL)\n            cout << \" -> \";\n    }\n    cout << endl;\n}\n\nvoid Length_Iterative() {\n    int length = 0;\n    node *temp = head;\n    while (temp) {\n        length += 1;\n        temp = temp -> next;\n    }\n    cout << \"Length is \" << length << \" (Iterative)\" << endl;\n}\n\nint Recursive_Count(node* current) {\n    if(current == NULL)\n        return 0;\n    return (1 + Recursive_Count(current -> next));\n}\n\nvoid Length_Recursive() {\n    int length = Recursive_Count(head);\n    cout << \"Length is \" << length << \" (Recursive)\" << endl;\n}\n\nint main() {\n    for(int i = 0; i < 5; i++)\n        Insert_At_Beginning(i);\n\n    Print_Linked_List();\n\n    for(int i = 5; i < 10; i++)\n        Insert_At_End(i);\n\n    Print_Linked_List();\n\n    Insert_After_Value(5, 9);\n    Insert_After_Value(10, 9);\n\n    Print_Linked_List();\n\n    for(int i = 0; i < 3; i++)\n        Delete_At_End();\n\n    Print_Linked_List();\n\n    for(int i = 0; i < 3; i++)\n        Delete_At_Beginning();\n\n    Print_Linked_List();\n\n    Delete_With_Value(1);\n    Delete_With_Value(5);\n\n    Print_Linked_List();\n\n    Search(6);\n    Search(8);\n\n    Length_Iterative();\n    Length_Recursive();\n\n    return 0;\n}\n\n/*  Output\n    4 -> 3 -> 2 -> 1 -> 0\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 6 -> 7 -> 8 -> 9\n    Element 10 is not in list\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6 -> 7 -> 8 -> 9\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6\n    1 -> 0 -> 5 -> 9 -> 6\n    0 -> 9 -> 6\n    Element 6 is present in list\n    Element 8 not found\n    Length is 3 (Iterative)\n    Length is 3 (Recursive)\n*/\n"
}
