{
  "mainALGO": "def insertion(list, left, right):\n    for i in range(left, right + 1):\n        key = list[i]\n        j = i\n\n        while j > left and list[j-1] > key:\n            list[j] = list[j-1]\n            j -= 1\n\n        list[j] = key\n\n# Conquer\ndef conquer_merge(list, left, right, mid):\n    #temp = [None] * len(list)\n    i = left\n    j = mid + 1\n    k = left\n\n    while i <= mid and j <= right:\n        if list[i] <= list[j]:\n            temp[k] = list[i]\n            i += 1\n        else:\n            temp[k] = list[j]\n            j += 1\n\n        k += 1\n\n    while i <= mid:\n        temp[k] = list[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = list[j]\n        j += 1\n        k += 1\n\n    while left <= right:\n        list[left] = temp[left]\n        left += 1\n\n# Divide list into halves\ndef divide(list, left, right):\n    # If the size of sublist to be sorted is less than or equal to 8.\n    # Perform Insertion Sort\n    if right - left <= 8:\n        insertion(list, left, right)\n    # If size of list is greater than 8.\n    # Perform Merge_Sort\n    else:\n        mid = left + (right - left) / 2;\n        mid = int(mid)\n\n        divide(list, left, mid)\n        divide(list, mid + 1, right)\n\n        conquer_merge(list, left, right, mid)\n\ndef Merge_Sort(list):\n    global temp\n    temp = [0] * len(list)\n    divide(list, 0, len(list) - 1)\n    del temp\n\n# function to print list\ndef Print_list(list):\n    for i in range(0, len(list)):\n        print(list[i],end=\" \")\n\n    print()\n\nlist = [2, 4, 3, 1, 6, 8, 4, 10, 11, 0, 15, 7, 9]\n\nMerge_Sort(list)\n\nPrint_list(list)\n\n# Output\n# 0 1 2 3 4 4 6 7 8 9 10 11 15\n"
}
