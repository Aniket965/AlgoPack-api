{
  "mainALGO": "import sys\nimport random\n\n# Partitoning in 3 way:\n# | element < pivot | element = pivot | element > pivot |\ndef partition_3way(list, lower_bound, upper_bound):\n    pivot = list[lower_bound]\n    index_small = lower_bound; # index_small -> pointer of smaller elements\n    index_equal = lower_bound; # index_equal -> pointer of equal elements\n    for iterator in range(lower_bound + 1, upper_bound + 1):\n        if list[iterator] < pivot:\n            if index_small == index_equal:\n                list[index_small + 1], list[iterator] = list[iterator], list[index_small + 1]\n            else:\n                list[index_small + 1], list[iterator] = list[iterator], list[index_small + 1]\n                list[index_equal + 1], list[iterator] = list[iterator], list[index_equal + 1]\n            index_small += 1\n            index_equal += 1\n\n        elif list[iterator] == pivot:\n            index_equal += 1\n            list[iterator], list[index_equal] = list[index_equal], list[iterator]\n    list[lower_bound], list[index_small] = list[index_small], list[lower_bound]\n    return index_small, index_equal\n\ndef randomized_quick_sort(list, lower_bound, upper_bound):\n    if lower_bound >= upper_bound:\n        return\n    ran_index = random.randint(lower_bound, upper_bound)\n    list[lower_bound], list[ran_index] = list[ran_index], list[lower_bound]\n    # Use partition_3way\n    index_small, index_equal = partition_3way(list, lower_bound, upper_bound)\n    randomized_quick_sort(list, lower_bound, index_small - 1)\n    randomized_quick_sort(list, index_equal + 1, upper_bound)\n\n\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    no_of_elements, *list = list(map(int, input.split()))\n    randomized_quick_sort(list, 0, no_of_elements - 1)\n    for iterator in list:\n        print(iterator, end=' ')\n"
}
