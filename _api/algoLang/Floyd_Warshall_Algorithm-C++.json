{
  "mainALGO": "#include <iostream>\n#include <limits.h>\n#include <iomanip>\n\n#define Infinity INT_MAX\n#define A 4\n\nusing namespace std;\n\nvoid FloydWarshall(int graph[A][A]);\n\nvoid output(int length[A][A]);\n\nvoid FloydWarshall(int graph[A][A])\n{\n  int length[A][A],x,y,z;\n  for(x = 0; x < A; x++)\n    for(y = 0; y < A; y++)\n      length[x][y] = graph[x][y];\n\n  for(z = 0; z < A; z++)\n    for(x = 0; x < A; x++)\n      for(y = 0; y < A; y++)\n       { if(length[x][z] != Infinity &&\n            length[z][y] != Infinity &&\n            length[x][z] + length[z][y] < length[x][y])\n            length[x][y] = length[x][z] + length[z][y];\n       }\n  output(length);\n}\n\nvoid output(int length[A][A])\n{\n     cout << \"The matrix below shows the shortest distances between each pair of vertices\\n\";\n     for (int x = 0; x < A; x++)\n      {\n        for (int y = 0; y < A; y++)\n        {\n          if (length[x][y] == Infinity)\n           cout << setw(12) << \"INFINITY\";\n          else\n           cout << setw(12) << length[x][y];\n        }\n       cout << endl;\n      }\n}\n\nint main() {\n  int graph[A][A] = {     {0,        8,        Infinity, 15},\n                          {Infinity, 0,        7,        Infinity},\n                          {Infinity, Infinity, 0,        7},\n                          {Infinity, Infinity, Infinity, 0}\n                    };\n  FloydWarshall(graph);\n  return 0;\n}\n\n/* OUTPUT\n\nThe matrix below shows the shortest distances between each pair of vertices\n           0           8          15          15\n    INFINITY           0           7          14\n    INFINITY    INFINITY           0           7\n    INFINITY    INFINITY    INFINITY           0\n\n*/\n"
}
