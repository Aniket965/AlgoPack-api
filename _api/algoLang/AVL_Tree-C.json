{
  "mainALGO": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct AVLNode\n{\n    int value;\n    struct AVLNode *left;\n    struct AVLNode *right;\n    int height;\n};\n\nstruct AVLTree\n{\n    struct AVLNode *root;\n    int size;\n};\n\nvoid AVLTreeInit(struct AVLTree *tree)\n{\n    tree->root = NULL;\n    tree->size = 0;\n}\n\nstruct AVLTree *AVLTreeNew()\n{\n    struct AVLTree *tree = (struct AVLTree *)malloc(sizeof(struct AVLTree));\n\n    AVLTreeInit(tree);\n\n    return tree;\n}\n\nvoid _AVLNodeFree(struct AVLNode *current)\n{\n    if (current != NULL)\n    {\n        _AVLNodeFree(current->left);\n        _AVLNodeFree(current->right);\n        free(current);\n        current = NULL;\n    }\n}\n\nvoid AVLTreeClear(struct AVLTree *tree)\n{\n    _AVLNodeFree(tree->root);\n    tree->root = NULL;\n    tree->size = 0;\n}\n\nvoid AVLTreeDelete(struct AVLTree *tree)\n{\n    AVLTreeClear(tree);\n    free(tree);\n    tree = NULL;\n}\n\nint AVLTreeSize(struct AVLTree *tree)\n{\n    return tree->size;\n}\n\nint AVLTreeHeight(struct AVLTree *tree)\n{\n    return tree->root->height;\n}\n\nint _h(struct AVLNode *current)\n{\n    if (current == NULL)\n        return -1;\n    return current->height;\n}\n\nvoid _setHeight(struct AVLNode *current)\n{\n    int leftHeight = _h(current->left);\n    int rightHeight = _h(current->right);\n    \n    if (leftHeight < rightHeight)\n        current->height = 1 + rightHeight;\n    else\n        current->height = 1 + leftHeight;\n}\n\nstruct AVLNode *_rotateLeft(struct AVLNode *current)\n{\n    struct AVLNode *newTop = current->right;\n    current->right = newTop->left;\n    newTop->left = current;\n    \n    _setHeight(current);\n    _setHeight(newTop);\n    \n    return newTop;\n}\n\nstruct AVLNode *_rotateRight(struct AVLNode *current)\n{\n    struct AVLNode *newTop = current->left;\n    current->left = newTop->right;\n    newTop->right = current;\n    \n    _setHeight(current);\n    _setHeight(current);\n    \n    return newTop;\n}\n\nint _bf(struct AVLNode *current)\n{\n    return _h(current->right) - _h(current->left);\n}\n\nstruct AVLNode *_balance(struct AVLNode *current)\n{\n    int cbf = _bf(current);\n    \n    if (cbf < -1)\n\t{\n        if (_bf(current->left) > 0)\n            current->left = _rotateLeft(current->left);\n        return _rotateRight(current);\n\t}\n    else if (cbf > 1)\n    {\n        if (_bf(current->right) < 0)\n            current->right = _rotateRight(current->right);\n        return _rotateLeft(current);\n    }\n    \n    _setHeight(current);\n    \n    return current;\n}\n\nstruct AVLNode *_AVLNodeAdd(struct AVLNode *current, int newValue)\n{\n    struct AVLNode *newNode;\n    \n    if (current == NULL)\n    {\n        newNode = (struct AVLNode *)malloc(sizeof(struct AVLNode));\n        \n        newNode->value = newValue;\n        newNode->left = NULL;\n        newNode->right = NULL;\n        newNode->height = 0;\n        return newNode;\n    }\n    else if (newValue < current->value)\n    {\n        current->left = _AVLNodeAdd(current->left, newValue);\n    }\n    else\n    {\n        current->right = _AVLNodeAdd(current->right, newValue);\n    }\n    \n    return _balance(current);\n}\n\nvoid AVLTreeAdd(struct AVLTree *tree, int newValue)\n{\n    tree->root = _AVLNodeAdd(tree->root, newValue);\n    tree->size++;\n}\n\nint AVLTreeContains(struct AVLTree *tree, int value)\n{\n    struct AVLNode *current = tree->root;\n\n    while (current != NULL)\n    {\n        if (value == current->value)\n        {\n            return 1;\n        }\n        else if (value < current->value)\n        {\n            current = current->left;\n        }\n        else\n        {\n            current = current->right;\n        }\n    }\n\n    return 0;\n}\n\nint _leftMost(struct AVLNode *current)\n{\n    while (current->left != NULL)\n    {\n        current = current->left;\n    }\n    return current->value;\n}\n\nstruct AVLNode *_removeLeftMost(struct AVLNode *current)\n{\n    struct AVLNode *temp;\n    \n    if (current->left != NULL)\n    {\n        current->left = _removeLeftMost(current->left);\n        return _balance(current);\n    }\n    \n    temp = current->right;\n    free(current);\n    current = NULL;\n    return temp;\n}\n\nstruct AVLNode *_AVLNodeRemove(struct AVLNode *current, int value)\n{\n    if (value == current->value)\n    {\n        if (current->right == NULL)\n        {\n            struct AVLNode *temp = current->left;\n            free(current);\n            current = NULL;\n            return temp;\n        }\n        else\n        {\n            current->value = _leftMost(current->right);\n            current->right = _removeLeftMost(current->right);\n        }\n    }\n    else if (value < current->value)\n    {\n        current->left = _AVLNodeRemove(current->left, value);\n    }\n    else\n    {\n        current->right = _AVLNodeRemove(current->right, value);\n    }\n    \n    return _balance(current);\n}\n\nvoid AVLTreeRemove(struct AVLTree *tree, int value)\n{\n    if (AVLTreeContains(tree, value))\n    {\n        tree->root = _AVLNodeRemove(tree->root, value);\n        tree->size--;\n    }\n}\n\nint AVLTreeGetSmallest(struct AVLTree *tree)\n{\n    return _leftMost(tree->root);\n}\n\nvoid AVLTreeRemoveSmallest(struct AVLTree *tree)\n{\n    tree->root = _removeLeftMost(tree->root);\n    tree->size--;\n}\n\nvoid AVLNodePrint(struct AVLNode *current)\n{\n    if (current == NULL)\n    {\n        return;\n    }\n\n    printf(\"(\");\n    AVLNodePrint(current->left);\n\n    printf(\"%d\", current->value);\n\n    AVLNodePrint(current->right);\n    printf(\")\");\n}\n\nvoid AVLTreePrint(struct AVLTree *tree)\n{\n    if (tree == NULL)\n    {\n        return;\n    }\n\n    AVLNodePrint(tree->root);\n    printf(\"\\n\");\n}\n\nint main()\n{    \n    struct AVLTree *tree = AVLTreeNew();\n\n    AVLTreeAdd(tree, 4);\n    AVLTreeAdd(tree, 7);\n    printf(\"Contains 4: %d\\n\", AVLTreeContains(tree, 4));\n    printf(\"Contains 9: %d\\n\", AVLTreeContains(tree, 9));\n    AVLTreePrint(tree);\n\n    AVLTreeAdd(tree, 3);\n    AVLTreePrint(tree);\n\n    AVLTreeAdd(tree, 2);\n    AVLTreePrint(tree);\n    printf(\"Smallest  : %d\\n\", AVLTreeGetSmallest(tree));\n    AVLTreeRemoveSmallest(tree);\n    AVLTreePrint(tree);\n\n    AVLTreeAdd(tree, 23);\n    AVLTreePrint(tree);\n    printf(\"Smallest  : %d\\n\", AVLTreeGetSmallest(tree));\n    printf(\"Size      : %d\\n\", AVLTreeSize(tree));\n    printf(\"Height    : %d\\n\", AVLTreeHeight(tree));\n\n    AVLTreeRemove(tree, 3);\n    AVLTreePrint(tree);\n    printf(\"Size      : %d\\n\", AVLTreeSize(tree));\n    printf(\"Height    : %d\\n\", AVLTreeHeight(tree));\n\n    AVLTreeAdd(tree, 3);\n    AVLTreePrint(tree);\n    AVLTreeAdd(tree, 1);\n    AVLTreePrint(tree);\n    AVLTreeAdd(tree, 0);\n    AVLTreePrint(tree);\n\n    AVLTreeDelete(tree);\n\n    return 0;\n}\n\n/* Output:\nContains 4: 1\nContains 9: 0\n(4(7))\n((3)4(7))\n(((2)3)4(7))\nSmallest  : 2\n((3)4(7))\n((3)4(7(23)))\nSmallest  : 3\nSize      : 4\nHeight    : 2\n((4)7(23))\nSize      : 3\nHeight    : 1\n(((3)4)7(23))\n(((1)3(4))7(23))\n(((0)1)3((4)7(23)))\n*/\n"
}
