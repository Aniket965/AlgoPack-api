{
  "mainALGO": "\n#include <stdio.h>\n#include <stdlib.h>\n#include<limits.h>\ntypedef struct Stack\n{\n    int top;\n    unsigned capacity;\n    int* array;\n}Stack;\n \nStack* createStack(unsigned capacity)\n{\n    struct Stack* stack = (Stack*) malloc(sizeof(Stack));\n    stack->capacity = capacity;\n    stack->top = -1;\n    stack->array = (int*) malloc(stack->capacity * sizeof(int));\n    return stack;\n}\n \n\nint Full(Stack* stack)\n{   return stack->top == stack->capacity - 1; }\n\nint Empty(Stack* stack)\n{   return stack->top == -1;  }\nvoid push(Stack* stack, int item)\n{\n    if (Full(stack))\n        return;\n    stack->array[++stack->top] = item;\n    printf(\"%d pushed to stack\\n\", item);\n}\nint pop(Stack* stack)\n{\n    if (Empty(stack))\n        return INT_MIN;\n    return stack->array[stack->top--];\n}\nint peek(Stack* stack)\n{\n    if (Empty(stack))\n        return INT_MIN;\n    return stack->array[stack->top];\n}\nint main()\n{\n    Stack* stack = createStack(100);\n \n    push(stack, 14);\n    push(stack, 25);\n    push(stack, 38);\n    push(stack, 48);\n \n    printf(\"%d popped from stack\\n\", pop(stack));\n \n    printf(\"Top item is %d\\n\", peek(stack));\n \n    return 0;\n}\n//output\n/*14 pushed to stack\n25 pushed to stack\n38 pushed to stack\n48 pushed to stack\n48 popped from stack\nTop item is 38*/\n"
}
