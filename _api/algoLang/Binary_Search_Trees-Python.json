{
  "mainALGO": "class node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.head = None\n\n    def Insert(self, value):\n        temp = node(value)\n\n        if(self.head == None):\n            self.head = temp\n        else:\n            current = self.head\n\n            while current != None:\n                if value < current.data:\n                    if current.left != None:\n                        current = current.left\n                    else:\n                        current.left = temp\n                        return\n                else:\n                    if current.right != None:\n                        current = current.right\n                    else:\n                        current.right = temp\n                        return\n\n    def Search(self, value):\n        current = self.head\n\n        while current != None:\n            if value < current.data:\n                current = current.left\n            elif value > current.data:\n                current = current.right\n            else:\n                print(\"Element \" + str(value) + \" Found\")\n                return\n\n        print(\"Element \" + str(value) + \" not Found\")\n\n    def Min_Value(self, head):\n        while head.left != None:\n            head = head.left\n\n        return head.data\n\n    def Delete_Key(self, head, value):\n        if head == None:\n            return head\n\n        if value < head.data:\n            head.left = self.Delete_Key(head.left, value)\n        elif value > head.data:\n            head.right = self.Delete_Key(head.right, value)\n        else:\n            if head.right == None:\n                return head.left\n            elif head.left == None:\n                return head.right\n\n            head.data = self.Min_Value(head.right)\n            head.right = self.Delete_Key(head.right, head.data)\n\n        return head\n\n    def Delete(self, value):\n        self.head = self.Delete_Key(self.head, value)\n\nBST = BinarySearchTree()\n\nBST.Insert(5)\nBST.Insert(7)\nBST.Insert(9)\nBST.Insert(8)\nBST.Insert(6)\nBST.Insert(4)\n\nBST.Search(9)\nBST.Search(2)\n\nBST.Delete(7)\nBST.Delete(5)\nBST.Delete(4)\n\nBST.Search(9)\nBST.Search(2)\nBST.Search(5)\nBST.Search(6)\n\n\n''' Output\n\nElement 9 Found\nElement 2 not Found\nElement 9 Found\nElement 2 not Found\nElement 5 not Found\nElement 6 Found\n\n'''\n"
}
