{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nstruct node\n{\n    node *number[10];\n    bool isLeaf;\n} *root = NULL;\n\nnode *getNode()\n{\n    node *temp = new node();\n    temp -> isLeaf = false;\n\n    for(int i = 0; i < 10; i++)\n    {\n        temp -> number[i] = NULL;\n    }\n\n    return temp;\n}\n\nvoid insert(int a)\n{\n    if(root == NULL)\n        root = getNode();\n\n    node *current = root;\n\n    while(a != 0)\n    {\n        if(current -> number[a % 10] == NULL)\n        {\n            node *new_node = getNode();\n            current -> number[a % 10] = new_node;\n            current = new_node;\n        }\n        else\n            current = current -> number[a % 10];\n\n        a /= 10;\n    }\n\n    current -> isLeaf = true;\n}\n\nvoid search(int value)\n{\n    if(root == NULL)\n        cout << \"There is no word in Trie\" << endl;\n\n    node *current = root;\n    int a = value;\n\n    while(a != 0)\n    {\n        if(current -> number[a % 10] == NULL)\n        {\n            break;\n        }\n        else\n            current = current -> number[a % 10];\n\n        a /= 10;\n    }\n\n    if(a == 0 && current -> isLeaf == true)\n        cout << value << \" Found\" << endl;\n    else\n        cout << value << \" Not Present\" << endl;\n}\n\nbool isFreeNode(node *root)\n{\n    for(int i = 0; i < 10; i++)\n    {\n        if(root -> number[i] != NULL)\n            return false;\n    }\n\n    return true;\n}\n\nbool removeNumber(node *root, int a)\n{\n    if(root)\n    {\n        if(a == 0)\n        {\n            if(root -> isLeaf)\n            {\n                root -> isLeaf = false;\n\n                if(isFreeNode(root))\n                    return true;\n            }\n\n            return false;\n        }\n        else\n        {\n            if(removeNumber(root -> number[a % 10], a / 10))\n            {\n                delete root -> number[a % 10];\n                root -> number[a % 10] = NULL;\n\n                return (!root -> isLeaf && isFreeNode(root));\n            }\n        }\n    }\n\n    return false;\n}\n\nvoid remove(int a)\n{\n    if(a != 0 && root != NULL)\n        removeNumber(root, a);\n}\n\nint main()\n{\n    int a = 99, b = 9999, c = 9987, d = 8687, e = 5499;\n\n    insert(a);\n    insert(b);\n    insert(c);\n    insert(d);\n    insert(e);\n\n    search(a);\n    search(b);\n    search(e);\n    search(7676);\n\n    remove(a);\n\n    search(a);\n\n    return 0;\n}\n\n/* Output\n\n99 Found\n9999 Found\n5499 Found\n7676 Not Present\n99 Not Present\n\n*/\n"
}
