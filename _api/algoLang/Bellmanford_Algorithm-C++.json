{
  "mainALGO": "#include <iostream>\n\nusing namespace std;\n\nconst int vertices = 5;\n\nvoid bellmanford(int adjacency_matrix[vertices][vertices], int source)\n{\n    int distance[vertices];\n    int predecessor[vertices];\n    for (int i = 0; i < vertices; i++)\n    {\n        distance[i] = 9999;\n        predecessor[i] = -1;\n    }\n\n    distance[source] = 0;\n\n    for (int i = 0; i < vertices; i++)\n    {\n        for (int j = 0; j < vertices; j++)\n        {\n            for (int k = 0; k < vertices; k++)\n            {\n                if (adjacency_matrix[j][k] != 0 && distance[j] + adjacency_matrix[j][k] < distance[k])\n                {\n                    distance[k] = distance[j] + adjacency_matrix[j][k];\n                    predecessor[k] = j;\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < vertices; i++)\n    {\n        for (int j = 1; j < vertices; j++)\n        {\n            if (adjacency_matrix[i][j] != 0 && distance[i] + adjacency_matrix[i][j] < distance[j])\n            {\n                cout << \"The Graph contains negative weight cycle\";\n                return;\n            }\n        }\n    }\n\n    cout << \"Distance of all the vertices from source \" << source << endl;\n    cout << \"Vertex\\tDistance\\tpredecessor\\n\";\n\n    for (int i = 0; i < vertices; i++)\n        cout << i << \"\\t\" << distance[i] << \"\\t\\t\" << predecessor[i] << endl;\n}\n\nint main()\n{\n    int adjacency_matrix[vertices][vertices] = {\n                                                {0, 0, 6, 3, 0},\n                                                {3, 0, 0, 0, 0},\n                                                {0, 0, 0, 2, 0},\n                                                {0, 1, 1, 0, 0},\n                                                {0, 4, 0, 2, 0}\n                                            };\n\n    bellmanford(adjacency_matrix, 4);\n    return 0;\n}\n\n\n/* output\n * Distance of all the vertices from source 4\n * Vertex Distance  predecessor\n * 0  6   1\n * 1  3   3\n * 2  3   3\n * 3  2   4\n * 4  0   -1\n */\n"
}
