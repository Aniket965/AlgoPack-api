{
  "mainALGO": "class Queue:\n    def __init__(self):\n        self.data = collections.deque()\n        \n    def push(self, x):\n        self.data.append(x)\n    \n    def peek(self):\n        return self.data[0]\n    \n    def pop(self):\n        return self.data.popleft()\n    \n    def size(self):\n        return len(self.data)\n    \n    def empty(self):\n        return len(self.data) == 0\n\n\nclass Stack:\n    def __init__(self):\n        self.q_ = Queue()\n\n    def push(self, x):\n        self.q_.push(x)\n        for _ in xrange(self.q_.size() - 1):\n            self.q_.push(self.q_.pop())\n\n    def pop(self):\n        self.q_.pop()\n\n    def top(self):\n        return self.q_.peek()\n\n    def empty(self):\n        return self.q_.empty()\n\n\nclass Stack2:\n    def __init__(self):\n        self.q_ = Queue()\n        self.top_ = None\n\n    def push(self, x):\n        self.q_.push(x)\n        self.top_ = x\n\n    def pop(self):\n        for _ in xrange(self.q_.size() - 1):\n            self.top_ = self.q_.pop()\n            self.q_.push(self.top_)\n        self.q_.pop()\n\n    def top(self):\n        return self.top_\n\n    def empty(self):\n        return self.q_.empty()\n\ns1 = Stack()\ns2 = Stack2()\n\nprint(s1.empty())\nprint(s2.empty())\ns1.push(1)\ns2.push(2)\nprint(s1.top())\nprint(s2.top())\ns1.pop()\ns2.pop()\n"
}
