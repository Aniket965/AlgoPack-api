{
  "mainALGO": "/**\n * Returns half the provided number\n *\n * @function parent\n * @param {number} number - Number to be halved\n * @return {number}\n *\n * Examples:\n *    parent(10)\n *    => 5\n */\nfunction parent(number) {\n  return Math.floor(number/2);\n}\n\n/**\n * Returns index corresponding to the left in a Heap\n *\n * @function left\n * @param {number} number - Number whose left is to be calculated\n * @return {number}\n *\n * Examples:\n *    left(10)\n *    => 20\n */\nfunction left(number) {\n  return 2 * number;\n}\n\n/**\n * Returns index corresponding to the right in a Heap\n *\n * @function parent\n * @param {number} number - Number whose right is to be calculated\n * @return {number}\n *\n * Examples:\n *    right(10)\n *    => 21\n */\nfunction right(number) {\n  return (2 * number) + 1;\n}\n\n/**\n * Returns half the provided number\n *\n * @function half\n * @param {number} number - Number to be halved\n * @return {number}\n *\n * Examples:\n *    half(10)\n *    => 5\n */\nfunction half(number) {\n  return parent(number);\n}\n\n/**\n * Returns half the provided number\n *\n * @extends Number\n * @function parent\n * @return {number}\n *\n * Examples:\n *    Number(10).parent();\n *    => 5\n */\nNumber.prototype.parent = function() {\n  return Math.floor(Number(this)/2);\n}\n\n/**\n * Returns index corresponding to the left in a Heap\n *\n * @extends Number\n * @function left\n * @return {number}\n *\n * Examples:\n *    Number(10).left();\n *    => 20\n */\nNumber.prototype.left = function() {\n  return 2 * Number(this);\n}\n\n/**\n * Returns index corresponding to the right in a Heap\n *\n * @extends Number\n * @function right\n * @return {number}\n *\n * Examples:\n *    Number(10).right();\n *    => 21\n */\nNumber.prototype.right = function() {\n  return (2 * Number(this)) + 1;\n}\n\n/**\n * Returns half the provided number\n *\n * @extends Number\n * @function parent\n * @return {number}\n *\n * Examples:\n *    Number(10).half();\n *    => 5\n */\nNumber.prototype.half = function() {\n  return Number(this).parent();\n}\n\n/**\n * Add a property to the Array object to track the heapSize of heap structure\n *\n * @extends Array\n * @property heapSize\n * @return undefined\n *\n * Examples:\n *    var arr = [];\n *    arr.heapSize = 10;\n *    => 10\n */\nArray.prototype.heapSize = 0;\n\n/**\n * Returns an array with elements populated between the specified range(INCLUSIVE)\n * in a REVERSE Order\n *\n * @extends Array\n * @function reverseRangeArray\n * @param {number} startIndex - Start element of the array to be built\n * @param {number} endIndex - End element of the array to be built\n * @return {array}\n *\n * Examples:\n *    (new Array()).reverseRangeArray(0, 5);\n *    ([]).reverseRangeArray(0, 5);\n *    => [5, 4, 3, 2, 1, 0]\n */\nArray.prototype.reverseRangeArray = function(startIndex, endIndex) {\n  var arr = []\n  for(var i=endIndex; i>=startIndex; i--) {\n    arr.push(i);\n  }\n  return arr;\n}\n\n/**\n * Ensures the max-heap property is being maintained from the index provided\n * Recursive, Max-Heap property A[parent] >= A[left] as well as A[right]\n *\n * @function maxHeapify\n * @param {array} arr - Input array\n * @param {number} i - Index at which the Max-Heap property is to be applied\n * @return undefined\n *\n * Examples:\n *    var arr = [5, 3, 8, 7, 9, 6, 2, 4, 1];\n *    maxHeapify(arr, 5)\n */\nfunction maxHeapify(arr, i) {\n  arr.heapSize = arr.heapSize || arr.length;\n\n  var l = Number(i).left(), r = Number(i).right();\n\n  var largest = (l <= arr.heapSize-1 && arr[l] > arr[i]) ? l : i;\n  if (r <= arr.heapSize-1 && arr[r] > arr[largest]) {\n    largest = r;\n  }\n\n  if(largest !== i) {\n    [arr[i], arr[largest]] = [arr[largest], arr[i]];\n    maxHeapify(arr, largest);\n  }\n}\n\n/**\n * Re-order the input array to adhere to the Max-Heap property at all indices\n *\n * @function buildMaxHeap\n * @param {array} arr - Input array\n * @return undefined\n *\n * Examples:\n *    var arr = [5, 3, 8, 7, 9, 6, 2, 4, 1];\n *    buildMaxHeap(arr);\n */\nfunction buildMaxHeap(arr) {\n  arr.heapSize = arr.length;\n  (new Array()).reverseRangeArray(0, Number(arr.length).half()).forEach(function(i) {\n    maxHeapify(arr, i);\n  });\n}\n\n/**\n * Sorts the array by adhering to the Max-Heap property and simulataneously\n * decreasing the heap size\n *\n * @function heapSort\n * @param {array} arr - Input array\n * @return {array}\n *\n * Examples:\n *    var arr = [5, 3, 8, 7, 9, 6, 2, 4, 1];\n *    heapSort(arr);\n *    => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n */\nfunction heapSort(arr) {\n  buildMaxHeap(arr);\n  (new Array()).reverseRangeArray(1, arr.length-1).forEach(function(i) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    arr.heapSize -= 1;\n    maxHeapify(arr, 0);\n  });\n  return arr;\n}\n\nfunction unitTestHeap() {\n  test(\"Max Heapify\", maxHeapifyTest());\n  test(\"Build Max Heap\", buildMaxHeapTest());\n  test(\"Heap Sort\", heapSortTest())\n}\n\nfunction test(functionName, functionTest) {\n  if(functionTest) {\n    console.log(functionName + \" OK\");\n  } else {\n    console.log(functionName + \" FAIL\");\n  }\n}\n\nfunction maxHeapifyTest() {\n  var arr = [5, 3, 8, 7, 9, 6, 2, 4, 1];\n  maxHeapify(arr, 2);\n  return JSON.stringify(arr) === JSON.stringify([5, 3, 9, 7, 8, 6, 2, 4, 1]);\n}\n\nfunction buildMaxHeapTest() {\n  var arr = [5, 3, 8, 7, 9, 6, 2, 4, 1];\n  buildMaxHeap(arr);\n  return JSON.stringify(arr) === JSON.stringify([9, 8, 6, 7, 3, 5, 2, 4, 1]);\n}\n\nfunction heapSortTest() {\n  var arr = [5, 3, 8, 7, 9, 6, 2, 4, 1]\n  return JSON.stringify(heapSort(arr)) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n}\n\nunitTestHeap();\n"
}
