{
  "mainALGO": "#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nstruct node\r\n{\r\n\tint data;\r\n\tnode *next;\r\n};\r\n\r\nnode *last;\r\n\r\n/**** Create Circular Link List ****/\r\nvoid create_node(int value)\r\n{\r\n    node *temp;\r\n    temp = new node;\r\n    temp->data = value;\r\n    if (last == NULL)\r\n    {\r\n        last = temp;\r\n        temp->next = last;   \r\n    }\r\n    else\r\n    {\r\n        temp->next = last->next; \r\n        last->next = temp;\r\n        last = temp;\r\n    }\r\n}\r\n\r\n/**** Insertion of element at a particular place ****/\r\nvoid Insertion(int value, int pos)\r\n{\r\n    if (last == NULL)\r\n        return;\r\n \r\n    node *temp, *s;\r\n    s = last->next;\r\n    for (int i = 1; i < pos; i++)\r\n    {\r\n        s = s->next;\r\n        if (s == last->next)\r\n            return;\r\n    }\r\n    temp = new node;\r\n    temp->next = s->next;\r\n    temp->data = value;\r\n    s->next = temp;\r\n    \r\n    if (s == last)    // Element inserted at the end\r\n    { \r\n        last = temp;\r\n    }\r\n}\r\n\r\n\r\n/**** Deletion of element from the list ****/\r\nvoid Deletion(int value)\r\n{\r\n    struct node *temp, *s;\r\n    s = last->next;\r\n      \r\n    if (last->next == last && last->data == value)          // One element is there \r\n    {\r\n        temp = last;\r\n        last = NULL;\r\n        delete temp;\r\n        return;\r\n    }\r\n    if (s->data == value)                           // First Element Deletion\r\n    {\r\n        temp = s;\r\n        last->next = s->next;\r\n        delete temp;\r\n        return;\r\n    }\r\n    while (s->next != last)\r\n    {\r\n        if (s->next->data == value)              // Deletion in between of list \r\n        {\r\n            temp = s->next;\r\n            s->next = temp->next;\r\n            delete temp;\r\n            return;\r\n        }\r\n        s = s->next;\r\n    }\r\n    \r\n    if (s->next->data == value)                 // Deletion of last element  \r\n    {\r\n        temp = s->next;\r\n        s->next = last->next;\r\n        delete temp;\r\n        last = s;\r\n        return;\r\n    }\r\n    cout << \"Not found in the list\" << endl;\r\n}\r\n \r\n \r\n/**** Search element in the list ****/\r\nvoid Search(int value)\r\n{\r\n    node *s;\r\n    int position = 0;\r\n    s = last->next;\r\n    while (s != last)\r\n    {\r\n        position++;\r\n        if (s->data == value)    \r\n        {\r\n        \tcout << \"Found at :\" << position << endl;\r\n            return;\r\n        }\r\n        s = s->next;\r\n    }\r\n    if (s->data == value)    \r\n    {\r\n        position++;\r\n\t\tcout << \"Found at :\" << position << endl;             \r\n        return;\r\n    }\r\n    cout << \"Not found in the list\" << endl;\r\n}\r\n \r\n/**** Print Circular Link List ****/\r\nvoid Print()\r\n{\r\n    node *s;\r\n    if (last == NULL)\r\n      return;       // Empty list\r\n\r\n    s = last->next;\r\n    \r\n    while (s != last)\r\n    {\r\n        cout<<s->data<<\" -> \";\r\n        s = s->next;\r\n    }\r\n    cout << s->data << endl;\r\n}\r\n\r\nint main()\r\n{\r\n\tcreate_node(5);\r\n\tPrint();     // 5\r\n \t\r\n\tcreate_node(3);\r\n\tPrint();     // 5 -> 3\r\n    \r\n\tcreate_node(9);\r\n\tPrint();     // 5 -> 3 -> 9\r\n    \r\n\tInsertion(1, 2);\r\n\tPrint();     // 5 -> 3 -> 1 -> 9\r\n    \r\n\tSearch(1);                    // Found at 3                    \r\n\t\r\n\tSearch(4);                    // Not found in the list\r\n\t\r\n\tDeletion(1);\r\n\tPrint();     // 5 -> 3 -> 9\r\n\r\n\treturn 0;\r\n}\r\n\r\n"
}
