{
  "mainALGO": "/*\n * Author: Jennifer Tran\n * Last Updated: 21/10/2016\n *\n * NOTE: To make this code OOP friendly, place the Node and\n * LinkedList classes outside of the LinkedList_Bubble_Sort\n * class and remove the static.\n */\n\npublic class Linked_List_Bubble_Sort\n{\n  public static void main(String[] args)\n  {\n    LinkedList list = new LinkedList();\n\n    // Adding integers unordered\n    list.insertAtTop(14);\n    list.insertAtTop(33);\n    list.insertAtTop(27);\n    list.insertAtTop(35);\n    list.insertAtTop(10);\n\n    // Prints the integers before sorting\n    System.out.println(\"Before sorting: \");\n    list.print();\n\n    // Call BubbleSort method\n    list.bubbleSort();\n    System.out.println();\n\n    // Prints out the integers after sorting\n    System.out.println(\"After sorting: \");\n    list.print();\n  }\n\n  static class Node\n  {\n    private int item;\n    private Node next;\n\n    // Constructor\n    public Node (int newItem, Node newNode)\n    {\n      item = newItem;\n      next = newNode;\n    }\n\n    // Getter's and Setters\n    public int getItem()\n    {\n      return item;\n    }\n\n    public void setItem(int newItem)\n    {\n      item = newItem;\n    }\n\n    public Node getNext()\n    {\n      return next;\n    }\n\n    public void setNext(Node newNext)\n    {\n      next = newNext;\n    }\n  }\n\n  static class LinkedList\n  {\n    private Node top;\n\n    public LinkedList()\n    {\n      top = null;\n    }\n\n    public void insertAtTop(int value)\n    {\n      Node newNode = new Node(value,top);\n      top = newNode;\n    }\n\n    public void print()\n    {\n      Node curr = top;\n      while(curr != null)\n      {\n        System.out.print(curr.getItem() + \" \");\n        curr = curr.getNext();\n      }\n\n      System.out.println();\n    }\n\n    public void bubbleSort()\n    {\n      Node curr = top;\n      Node prev = null;\n      int temp = 0;\n\n      while(curr.getNext() != null)\n      {\n        prev = top;\n        while(prev.getNext() != null)\n        {\n          // If previous item is greater than current\n          if(prev.getItem() > prev.getNext().getItem())\n          {\n            temp = prev.getItem();\n\n            // Make the swap\n            prev.setItem(prev.getNext().getItem());\n            prev.getNext().setItem(temp);\n\n          }\n          prev = prev.getNext();\n        }\n        curr = curr.getNext();\n      }\n    }\n  }\n}\n\n/*\nOUTPUT:\nBefore sorting:\n10 35 27 33 14\n\nAfter sorting:\n10 14 27 33 35\n*/\n"
}
