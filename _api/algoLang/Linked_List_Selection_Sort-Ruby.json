{
  "mainALGO": "=begin\n\nAuthor: Jennifer Tran\nLast Updated: 21/10/2016\n\n=end\n\ndef main\n\nlist = LinkedList.new()\n\nputs(\"Before sorting:\")\nlist.add(13)\nlist.add(4)\nlist.add(10)\nlist.add(1)\nlist.add(20)\nlist.add(7)\nlist.printList\n\nputs(\"\\nAfter sorting:\")\nlist.selectionSort\nlist.printList\n\nend\n\nclass LinkedList\n  def initialize\n    @top = nil\n  end\n\n  # Inserts the items at the end of the list\n  def add(newItem)\n    curr = @top\n\n    # Top is empty insert at the front\n    if(curr == nil)\n      @top = Node.new(newItem,nil)\n    else\n      # Traverse through the list until it reaches the end\n      while curr.getNext != nil do\n        curr = curr.getNext\n      end\n\n      # Now set the new node\n      curr.setNext(Node.new(newItem,nil))\n\n    end\n  end\n\n  def printList\n    curr = @top\n    while(curr != nil)\n      print (curr.getItem)\n      print \" \"\n      curr = curr.getNext\n    end\n    puts()\n  end\n\n  def selectionSort\n    beg = @top\n    min = @top\n\n    # Iterate through the list\n    while(beg.getNext != nil)\n\t\t\tmin = beg\n\t\t\tcurr = beg.getNext\n\n\t\t\twhile(curr != nil)\n\t\t\t\t# Check to see if its the smallest\n\t\t\t\tif(curr.getItem < min.getItem)\n\t\t\t\t\tmin = curr\n\t\t\t\tend\n\n\t\t\t\tcurr = curr.getNext\n\t\t\tend\n\n\t\t\t# Swap the values\n\t\t\ttemp = beg.getItem\n\t\t\tbeg.setItem(min.getItem)\n\t\t\tmin.setItem(temp)\n\n\t\t\tbeg = beg.getNext\n\t\tend\n\n  end\nend\n\nclass Node\n  # Constructor\n  def initialize(newItem,newLink)\n    @item = newItem\n    @link = newLink\n  end\n\n  # Gets the item\n  def getItem\n    @item\n  end\n\n  # Gets the next node\n  def getNext\n    @link\n  end\n\n  # Sets the next node\n  def setNext(newLink)\n    @link = newLink\n  end\n\n  # Sets the next item\n  def setItem(newItem)\n    @item = newItem\n  end\n\nend\n\n# Calls the main method\nmain\n\n=begin\nOUTPUT:\n\nBefore sorting:\n13 4 10 1 20 7\n\nAfter sorting:\n1 4 7 10 13 20\n=end\n"
}
