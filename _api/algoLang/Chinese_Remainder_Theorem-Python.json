{
  "mainALGO": "# Calculating inverse using extended Euclidean algorithm iterative method\ndef inverse(a, m):\n    m0 = m; x0 = 0; x1 = 1\n\n    if m == 1:\n        return 0\n\n    while a > 1:\n        q = int(a / m); t = m\n        m = a % m; a = t\n        t = x0\n        x0 = x1 - q * x0; x1 = t\n\n    if x1 < 0:\n        x1 += m0\n\n    return x1\n\ndef findMinimumDividend(divisor, remainder):\n    product = 1\n\n    for i in range(len(divisor)):\n        product *= divisor[i]\n\n    result = 0\n\n    for i in range(len(divisor)):\n        partialProduct = int(product / divisor[i])\n        result += remainder[i] * inverse(partialProduct, divisor[i]) * partialProduct;\n\n    return result % product\n\ndivisor = [3, 4, 5, 7, 11]\nremainder = [2, 3, 1, 4, 5]\n\nprint(\"Minimum value of dividend is \" + str(findMinimumDividend(divisor, remainder)))\n\n''' Output\n\nMinimum value of dividend is 4235\n\n'''\n"
}
