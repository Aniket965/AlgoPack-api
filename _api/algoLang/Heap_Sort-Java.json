{
  "mainALGO": "class Heap_Sort\n{\n    /* Max heapify the node \n    *  Which is , interchanging largest children with the root of those children\n    *  to build Max heaps, its assume that the level below the root to be max-heapified are\n    *  already max heaps\n    */\n    public static void MaxHeapify(int[] array, int root, int size)\n    {\n        int left = 2 * root + 1, largest;\n        int right = left + 1, temp;\n\n        if(left < size && array[left] > array[root])\n            largest = left;\n        else\n            largest = root;\n\n        if(right < size && array[right] > array[largest])\n            largest = right;\n\n        if(largest != root)\n        {\n            temp = array[root];\n            array[root] = array[largest];\n            array[largest] = temp;\n            MaxHeapify(array, largest, size);\n        }\n    }\n\n    // MaxHeapify that nodes having leaves or max heap nodes as children\n    public static void Build_Max_Heap(int[] array, int size)\n    {\n        /** as leaves are already max heaps , hence iteration starts from n/2 ... 0th index\n        *   n/2 ... n are leaves\n        **/\n        for(int i = (size - 1) / 2; i >= 0; i--)\n            MaxHeapify(array, i, size);\n    }\n\n    public static void HeapSort(int array[], int size)\n    {\n        Build_Max_Heap(array, size);\n        int temp, i;\n\n        for(i = size - 1; i > 0; i--)\n        {\n            temp = array[0];\n            array[0] = array[i];\n            array[i] = temp;\n            MaxHeapify(array, 0, i);\n        }\n    }\n\n    // function ro print array\n    public static void Print_Array(int[] array, int size)\n    {\n        for(int i = 0; i < size; i++)\n            System.out.print(array[i] + \" \");\n\n        System.out.println();\n    }\n\n    public static void main(String[] args)\n    {\n        int[] array = {2, 4, 3, 1, 6, 8, 4};\n        HeapSort(array, 7);\n        Print_Array(array, 7);\n    }\n}\n\n// Output\n// 1 2 3 4 4 6 8\n"
}
