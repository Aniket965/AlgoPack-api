{
  "mainALGO": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAX_TREE_HT 100\n\nstruct MinHeapNode\n{\n    char data;\n    unsigned freq;\n    struct MinHeapNode *left, *right;\n};\n\nstruct MinHeap\n{\n    unsigned size;\n    unsigned capacity;\n    struct MinHeapNode **array;\n};\n\nstruct MinHeapNode* newNode(char data, unsigned freq)\n{\n    struct MinHeapNode* temp =\n          (struct MinHeapNode*) malloc(sizeof(struct MinHeapNode));\n    temp->left = temp->right = NULL;\n    temp->data = data;\n    temp->freq = freq;\n    return temp;\n}\n\nstruct MinHeap* createMinHeap(unsigned capacity)\n{\n    struct MinHeap* minHeap =\n         (struct MinHeap*) malloc(sizeof(struct MinHeap));\n    minHeap->size = 0;\n    minHeap->capacity = capacity;\n    minHeap->array =\n     (struct MinHeapNode**)malloc(minHeap->capacity * sizeof(struct MinHeapNode*));\n    return minHeap;\n}\n\nvoid swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b)\n{\n    struct MinHeapNode* t = *a;\n    *a = *b;\n    *b = t;\n}\n\nvoid minHeapify(struct MinHeap* minHeap, int idx)\n{\n    int smallest = idx;\n    int left = 2 * idx + 1;\n    int right = 2 * idx + 2;\n\n    if (left < minHeap->size &&\n        minHeap->array[left]->freq < minHeap->array[smallest]->freq)\n      smallest = left;\n\n    if (right < minHeap->size &&\n        minHeap->array[right]->freq < minHeap->array[smallest]->freq)\n      smallest = right;\n\n    if (smallest != idx)\n    {\n        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);\n        minHeapify(minHeap, smallest);\n    }\n}\n\nint isSizeOne(struct MinHeap* minHeap)\n{\n    return (minHeap->size == 1);\n}\n\nstruct MinHeapNode* extractMin(struct MinHeap* minHeap)\n{\n    struct MinHeapNode* temp = minHeap->array[0];\n    minHeap->array[0] = minHeap->array[minHeap->size - 1];\n    --minHeap->size;\n    minHeapify(minHeap, 0);\n    return temp;\n}\n\nvoid insertMinHeap(struct MinHeap* minHeap, struct MinHeapNode* minHeapNode)\n{\n    ++minHeap->size;\n    int i = minHeap->size - 1;\n    while (i && minHeapNode->freq < minHeap->array[(i - 1)/2]->freq)\n    {\n        minHeap->array[i] = minHeap->array[(i - 1)/2];\n        i = (i - 1)/2;\n    }\n    minHeap->array[i] = minHeapNode;\n}\n\nvoid buildMinHeap(struct MinHeap* minHeap)\n{\n    int n = minHeap->size - 1;\n    int i;\n    for (i = (n - 1) / 2; i >= 0; --i)\n        minHeapify(minHeap, i);\n}\n\nvoid printArr(int arr[], int n)\n{\n    int i;\n    for (i = 0; i < n; ++i)\n        printf(\"%d\", arr[i]);\n    printf(\"\\n\");\n}\n\nint isLeaf(struct MinHeapNode* root)\n{\n    return !(root->left) && !(root->right) ;\n}\n\nstruct MinHeap* createAndBuildMinHeap(char data[], int freq[], int size)\n{\n    struct MinHeap* minHeap = createMinHeap(size);\n    for (int i = 0; i < size; ++i)\n        minHeap->array[i] = newNode(data[i], freq[i]);\n    minHeap->size = size;\n    buildMinHeap(minHeap);\n    return minHeap;\n}\n\nstruct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size)\n{\n    struct MinHeapNode *left, *right, *top;\n    struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size);\n\n    while (!isSizeOne(minHeap))\n    {\n        left = extractMin(minHeap);\n        right = extractMin(minHeap);\n        top = newNode('$', left->freq + right->freq);\n        top->left = left;\n        top->right = right;\n        insertMinHeap(minHeap, top);\n    }\n\n    return extractMin(minHeap);\n}\n\nvoid printCodes(struct MinHeapNode* root, int arr[], int top)\n{\n    if (root->left)\n    {\n        arr[top] = 0;\n        printCodes(root->left, arr, top + 1);\n    }\n    if (root->right)\n    {\n        arr[top] = 1;\n        printCodes(root->right, arr, top + 1);\n    }\n\n    if (isLeaf(root))\n    {\n        printf(\"%c: \", root->data);\n        printArr(arr, top);\n    }\n}\n\nvoid HuffmanCodes(char data[], int freq[], int size)\n{\n   struct MinHeapNode* root = buildHuffmanTree(data, freq, size);\n   int arr[MAX_TREE_HT], top = 0;\n   printCodes(root, arr, top);\n}\n\nint main()\n{\n    // freopen(\"in.txt\",\"r\",stdin);\n    // freopen(\"out.txt\",\"w\",stdout);\n    int t;\n    scanf(\"%d\",&t);\n\n    while(t--)\n    {\n        int n,i;\n        scanf(\"%d\",&n);\n        char arr[26];\n        int freq[26];\n        for(i=0;i<n;i++){\n        cin>>arr[i]>>freq[i];\n        }\n    HuffmanCodes(arr, freq, n);\n    printf(\"\\n\");\n    }\n    return 0;\n}\n// sample input :\n// 1\n// 7\n// a 5\n// b 9\n// r 3\n// z 4\n// d 7\n// s 1\n// j 9\n\n// sample output :\n// z: 000\n// s: 0010\n// r: 0011\n// b: 01\n// j: 10\n// a: 110\n// d: 111\n"
}
