{
  "mainALGO": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node_s node_t;\n\ntypedef struct node_s\n{\n\tint data;\n\tnode_t* left;\n\tnode_t* right;\n} node_t;\n\nvoid Free( node_t* root )\n{\n\tif ( root == NULL )\n\t\treturn;\n\n\tFree( root->left );\n\tFree( root->right );\n\tfree( root );\n}\n\nint Left_Of( const int value, const node_t* root )\n{\n\treturn value < root->data;\n}\n\nint Right_Of( const int value, const node_t* root )\n{\n\treturn value > root->data;\n}\n\nnode_t* Insert( node_t* root, const int value )\n{\n\tif ( root == NULL )\n\t{\n\t\tnode_t* node = malloc( sizeof( node_t ) );\n\t\tnode->left = NULL;\n\t\tnode->right = NULL;\n\t\tnode->data = value;\n\t\treturn node;\n\t}\n\tif ( Left_Of( value, root ) )\n\t\troot->left = Insert( root->left, value );\n\telse if ( Right_Of( value, root ) )\n\t\troot->right = Insert( root->right, value );\n\treturn root;\n}\n\nint Search( const node_t* root, int value )\n{\n\tif ( root == NULL )\n\t\treturn 0;\n\tif ( Left_Of( value, root ) )\n\t\treturn Search( root->left, value );\n\tif( Right_Of( value, root ) )\n\t\treturn Search( root->right, value );\n\treturn 1;\n}\n\nint Leftmost_Value( const node_t* root )\n{\n\twhile ( root->left != NULL )\n\t\troot = root->left;\n\treturn root->data;\n}\n\nnode_t* Delete( node_t* root, int value )\n{\n\tif ( root == NULL )\n\t\treturn root;\n\tif ( Left_Of( value, root ) )\n\t\troot->left = Delete( root->left, value );\n\telse if ( Right_Of( value, root ) )\n\t\troot->right = Delete( root->right, value );\n\telse\n\t{\n\t\t// root->data == value, delete this node\n\t\tif ( root->left == NULL )\n\t\t{\n\t\t\tnode_t* newRoot = root->right;\n\t\t\tfree( root );\n\t\t\treturn newRoot;\n\t\t}\n\t\tif ( root->right == NULL )\n\t\t{\n\t\t\tnode_t* newRoot = root->left;\n\t\t\tfree( root );\n\t\t\treturn newRoot;\n\t\t}\n\t\troot->data = Leftmost_Value( root->right );\n\t\troot->right = Delete( root->right, root->data );\n\t}\n\treturn root;\n}\n\nint main()\n{\n\tnode_t* root = NULL;\n\troot = Insert( root, 5 );\n\troot = Insert( root, 7 );\n\troot = Insert( root, 9 );\n\troot = Insert( root, 8 );\n\troot = Insert( root, 6 );\n\troot = Insert( root, 4 );\n\n\tprintf( \"Contains 9: %d\\n\", Search( root, 9 ) );\n\tprintf( \"Contains 2: %d\\n\", Search( root, 2 ) );\n\n\troot = Delete( root, 7 );\n\troot = Delete( root, 5 );\n\troot = Delete( root, 4 );\n\n\tprintf( \"Contains 9: %d\\n\", Search( root, 9 ) );\n\tprintf( \"Contains 2: %d\\n\", Search( root, 2 ) );\n\tprintf( \"Contains 5: %d\\n\", Search( root, 5 ) );\n\tprintf( \"Contains 6: %d\\n\", Search( root, 6 ) );\n\n\tFree( root );\n\troot = NULL;\n\treturn 0;\n}\n\n/* Output\n\nContains 9: 1\nContains 2: 0\nContains 9: 1\nContains 2: 0\nContains 5: 0\nContains 6: 1\n\n*/\n"
}
