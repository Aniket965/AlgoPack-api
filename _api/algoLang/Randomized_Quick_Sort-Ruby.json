{
  "mainALGO": "# Internal: Divides the array into two segments by selecting last element as the key\n#\n# array - Array of integer elements\n# p     - start index of array\n# r     - end index of array (array_length-1)\n#\n# COMPLEXITY: Θ(n)\n#\n# Examples\n#   partition([1, 3, 8, 7, 9, 6, 2, 4, 5], 0, 8)\n#   => 4\n#\n# Returns a sorted array.\ndef partition(arr, p, r)\n\tkey = arr[r]\n\ti = p-1\n\t(p..r-1).each do |j|\n\t\tif arr[j] <= key\n\t\t\ti += 1\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\t# TODO: Show each step more clearly\n\t\t\t# p \"SWAPPING #{arr[i]} with #{arr[j]}\"\n\t\t\t# sleep(1.0)\n\t\tend\n\tend\n\tarr[i+1], arr[r] = arr[r], arr[i+1]\n\ti+1\nend\n\n# Internal: Divides the array into two segments by selecting random index element as the key\n#\n# arr - Array of integer elements\n# p   - start index of array\n# r   - end index of array (array_length-1)\n#\n# COMPLEXITY: Θ(n)\n#\n# Examples\n#   randomized_partition([1, 3, 8, 7, 9, 6, 2, 4, 5], 0, 8)\n#   => 4 (could be this, cannot be predicted due to the randomness)\n#\n# Returns a sorted array.\ndef randomized_partition(arr, p, r)\n\ti = rand(p..r)\n\tarr[r], arr[i] = arr[i], arr[r]\n\tpartition(arr, p, r)\nend\n\n\n# Internal: Sorts the elements of the array using RANDOMIZED QUICK sort algorithm\n# \t\t\t\t\tDivide and Conquer strategy\n# Dependancy: randomized_partition\n#\n# arr - Array of integer elements\n# p   - start index of array\n# r   - end index of array (array_length-1)\n#\n# COMPLEXITY: Θ(nlogn)\n# TODO: Update the code to handle any kind of datatype\n#       Make it a more sleek\n#\n# Examples\n#   randomized_quick_sort([5, 3, 8, 7, 9, 6, 2, 4, 1], 0, 8)\n#   randomized_quick_sort([5, 3, 8, 7, 9, 6, 2, 4, 1])\n#   => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n#\n# Returns a sorted array.\ndef randomized_quick_sort(arr, p=0, r=arr.length-1)\n\tif p < r\n\t\tq = randomized_partition(arr, p, r)\n\t\trandomized_quick_sort(arr, p, q-1)\n\t\trandomized_quick_sort(arr, q+1, r)\n\tend\n\tarr\nend\n\ndef unit_test_randomized_quick_sort\n  arr = [5, 3, 8, 7, 9, 6, 2, 4, 1]\n  ok = (randomized_quick_sort(arr) == [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  if ok\n    p \"RANDOMIZED QUICK SORT - OK\"\n  else\n    raise \"RESULT AND EXPECTED ARRAY DOES NOT MATCH\"\n  end\nend\n\nunit_test_randomized_quick_sort\n"
}
