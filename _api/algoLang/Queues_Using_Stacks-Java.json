{
  "mainALGO": "import java.util.Stack;\n\npublic class EfficientEnqueue {\n    Stack < Integer > primaryStack = new Stack < > ();\n    Stack < Integer > secondaryStack = new Stack < > ();\n    public void enqueue(int element)\n    {\n        primaryStack.push(element);\n    }\n    public int dequeue()\n    {\n        if (this.size() == 0)\n        {\n            System.out.print(\"UnderFlow  \");\n            return Integer.MIN_VALUE;\n        }\n        if (secondaryStack.empty())\n        {\n            while (!primaryStack.empty())\n            {\n                secondaryStack.push(primaryStack.pop());\n            }\n        }\n        return secondaryStack.pop();\n    }\n    public boolean isEmpty()\n    {\n        return primaryStack.empty() && secondaryStack.empty();\n    }\n    public int size()\n    {\n        return primaryStack.size() + secondaryStack.size();\n    }\n    public static void main(String args[]) {\n        EfficientEnqueue q1 = new EfficientEnqueue();\n        for (int i = 0; i < 10; i++)\n        {\n            q1.enqueue(i);\n        }\n        while (!q1.isEmpty())\n        {\n            System.out.println(q1.dequeue());\n        }\n    }\n}\n/*OUTPUT\n 0\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n */\n"
}
\n"
}
