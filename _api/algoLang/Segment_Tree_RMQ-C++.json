{
  "mainALGO": "#include <iostream>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\nint RMQ(int segArray[], int segStart, int segEnd, int start, int end, int index)\n{\n    if (start <= segStart && end >= segEnd)\n        return segArray[index];\n\n    if (segEnd < start || segStart > end)\n        return INT_MAX;\n\n    int mid = segStart + (segEnd - segStart) / 2;\n\n    int left = RMQ(segArray, segStart, mid, start, end, 2*index + 1);\n    int right = RMQ(segArray, mid + 1, segEnd, start, end, 2*index + 2);\n    return (left <= right ? left : right);\n}\n\nint buildSegmentTree(int array[], int start, int end, int segArray[], int index)\n{\n    if (start == end)\n    {\n        segArray[index] = array[start];\n        return array[start];\n    }\n\n    int mid = start + (end - start) / 2;\n    int left = buildSegmentTree(array, start, mid, segArray, index*2 + 1);\n    int right = buildSegmentTree(array, mid + 1, end, segArray, index*2 + 2);\n\n    segArray[index] = (left <= right ? left : right);\n\n    return segArray[index];\n}\n\nint main()\n{\n    int array[10] = {1, 3, 2, 7, 9, 11, 8, 4, 20, 15};\n    int size = 10;\n\n    int height = ceil( log2(size) );\n    int segtree_size = 2 * (pow(2, height) - 1);\n    int *segArray = new int[segtree_size];\n\n    buildSegmentTree(array, 0, size - 1, segArray, 0);\n\n    int start = 1, end = 5;\n\n    cout << \"Minimum value in index range \" <<  start << \" to \" << end << \" is\" << endl;\n    cout << RMQ(segArray, 0, size - 1, start, end, 0) << endl;\n\n    return 0;\n}\n\n\n/* Output\n *\n * Minimum value in index range 1 to 5 is\n * 2\n *\n */\n"
}
