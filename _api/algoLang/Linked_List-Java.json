{
  "mainALGO": "class Linked_List\n{\n    node head;\n\n    static class node\n    {\n        int data;\n        node next;\n\n        // Constructor\n        node(int d)\n        {\n            data = d;\n            next = null;\n        }\n    }\n\n    public boolean Is_List_Empty()\n    {\n        if(head == null)\n            return true;\n\n        return false;\n    }\n\n    public void Insert_At_Beginning(int value)\n    {\n        node temp = new node(value);\n        temp.next = head;\n        head = temp;\n    }\n\n    public void Insert_At_End(int value)\n    {\n        node temp = new node(value), current = head;\n        // temp.next = null;\n\n        if(Is_List_Empty())\n        {\n            head = temp;\n            return ;\n        }\n\n        while(current.next != null)\n            current = current.next;\n\n        current.next = temp;\n    }\n\n    public void Insert_After_Value(int desired, int value)\n    {\n        node current = head;\n\n        while(current != null && current.data != desired)\n            current = current.next;\n\n        if(current == null)\n            System.out.println(\"Element \" + desired + \" is not in list\");\n        else\n        {\n            node temp = new node(value);\n            temp.next = current.next;\n            current.next = temp;\n        }\n    }\n\n    public void Delete_At_Beginning()\n    {\n        if(Is_List_Empty())\n            System.out.println(\"List is empty\");\n        else\n        {\n            node temp = head;\n            head = head.next;\n            temp.next = null;\n        }\n    }\n\n    public void Delete_At_End()\n    {\n        if(Is_List_Empty())\n        {\n            System.out.println(\"List is empty\");\n            return ;\n        }\n\n        node temp = head, prev = null;\n\n        if(head.next == null)\n        {\n            head = null;\n            temp.next = null;\n            return ;\n        }\n\n        while(temp.next != null)\n        {\n            prev = temp;\n            temp = temp.next;\n        }\n\n        prev.next = temp.next;\n        temp.next = null;\n    }\n\n    public void Delete_With_Value(int desired)\n    {\n        if(Is_List_Empty())\n        {\n            System.out.println(\"List is empty\");\n            return ;\n        }\n\n        node temp = head, prev = null;\n\n        if(head.data == desired)\n        {\n            head = head.next;\n            temp.next = null;\n            return ;\n        }\n\n        while(temp != null && temp.data != desired)\n        {\n            prev = temp;\n            temp = temp.next;\n        }\n\n        if(temp == null)\n            System.out.println(\"Element \" + desired + \" is not in list\");\n        else\n        {\n            prev.next = temp.next;\n            temp.next = null;\n        }\n    }\n\n    public void Search(int desired)\n    {\n        node temp = head;\n\n        while(temp != null && temp.data != desired)\n            temp = temp.next;\n\n        if(temp == null)\n            System.out.println(\"Element \" + desired + \" not found\");\n        else\n            System.out.println(\"Element \" + desired + \" is present in list\");\n    }\n\n    public void Print_Linked_List()\n    {\n        if(Is_List_Empty())\n        {\n            System.out.println(\"List is empty\");\n            return ;\n        }\n\n        node current = head;\n\n        while(current.next != null)\n        {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n\n        System.out.println(current.data);\n    }\n\n    public void Get_Length_Iterative()\n    {\n        int elementCounter = 0;\n        node current = head;\n\n        while (current != null)\n        {\n            elementCounter++;\n            current = current.next;\n        }\n\n        System.out.println(\"Current Length: \" + elementCounter);\n    }\n\n    public void Get_Length_Recursive()\n    {\n        System.out.println(\"Current Length: \" + Count_Recursive(head));\n    }\n\n    public int Count_Recursive(node currNode)\n    {\n        if (currNode == null)\n            return 0;\n        else\n            return Count_Recursive(currNode.next) + 1;\n    }\n\n    public static void main(String[] args)\n    {\n        Linked_List LinkedList = new Linked_List();\n\n        int i;\n\n        for(i = 0; i < 5; i++)\n            LinkedList.Insert_At_Beginning(i);\n\n\n\n        LinkedList.Print_Linked_List();\n        LinkedList.Get_Length_Iterative();\n\n        for(i = 5; i < 10; i++)\n            LinkedList.Insert_At_End(i);\n\n        LinkedList.Print_Linked_List();\n        LinkedList.Get_Length_Recursive();\n\n        LinkedList.Insert_After_Value(5, 9);\n        LinkedList.Insert_After_Value(10, 9);\n\n        LinkedList.Print_Linked_List();\n        LinkedList.Get_Length_Iterative();\n\n        for(i = 0; i < 3; i++)\n            LinkedList.Delete_At_End();\n\n        LinkedList.Print_Linked_List();\n        LinkedList.Get_Length_Recursive();\n\n        for(i = 0; i < 3; i++)\n            LinkedList.Delete_At_Beginning();\n\n        LinkedList.Print_Linked_List();\n        LinkedList.Get_Length_Iterative();\n\n        LinkedList.Delete_With_Value(1);\n        LinkedList.Delete_With_Value(5);\n\n        LinkedList.Print_Linked_List();\n        LinkedList.Get_Length_Recursive();\n\n        LinkedList.Search(6);\n        LinkedList.Search(8);\n    }\n}\n\n/*  Output\n    4 -> 3 -> 2 -> 1 -> 0\n    Current Length: 5\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 6 -> 7 -> 8 -> 9\n    Current Length: 10\n    Element 10 is not in list\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6 -> 7 -> 8 -> 9\n    Current Length: 11\n    4 -> 3 -> 2 -> 1 -> 0 -> 5 -> 9 -> 6\n    Current Length: 8\n    1 -> 0 -> 5 -> 9 -> 6\n    Current Length: 5\n    0 -> 9 -> 6\n    Current Length: 3\n    Element 6 is present in list\n    Element 8 not found\n*/\n"
}
