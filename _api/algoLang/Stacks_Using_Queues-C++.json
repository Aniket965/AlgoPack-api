{
  "mainALGO": "#include <iostream>\n#include <stack>\n#include <queue>\n#include <climits>\n\nusing namespace std;\n\nclass Stack {\nprivate:\n    queue<int> q1, q2;\npublic:\n    // Push element x onto stack.\n    void push(int x) {\n        q1.push(x);\n    }\n\n    // Removes the element on top of the stack.\n    int pop() {\n        if (q1.empty()) {\n            cout << \"Stack is empty!\";\n            return INT_MIN;\n        }\n        int last;\n        if (q1.size() != 1) {\n            int size = q1.size();\n            for (int i = 0; i < size-1; i++) {\n                q2.push(q1.front());\n                q1.pop();\n            }\n            last = q1.front();\n            q1.pop();\n            swap(q1, q2);\n        }\n        return last;\n    }\n\n    // Get the top element.\n    int top() {\n       return q1.front();\n    }\n\n    // Return whether the stack is empty.\n    bool empty() {\n        return q1.empty();\n    }\n\n    void printStack() {\n        if (q1.empty()) {\n            cout << \"stack is empty!\\n\";\n            return;\n        }\n        queue<int> temp;\n        temp = q1;\n        while (temp.size()) {\n            cout << temp.front() << endl;\n            temp.pop();\n        }\n    }\n};\n\nint main() {\n    Stack push_efficient;\n\n    push_efficient.push(10);\n    push_efficient.push(20);\n    push_efficient.push(30);\n    push_efficient.push(40);\n    push_efficient.push(50);\n\n    push_efficient.pop();\n\n    push_efficient.push(60);\n    push_efficient.push(70);\n\n    push_efficient.pop();\n\n    push_efficient.push(80);\n    push_efficient.printStack();\n\n    return 0;\n}\n"
}
